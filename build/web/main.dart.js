// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const color_scheme = flutter_sdk.src__material__color_scheme;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const scaffold = flutter_sdk.src__material__scaffold;
  const basic = flutter_sdk.src__widgets__basic;
  const gesture_detector = flutter_sdk.src__widgets__gesture_detector;
  const implicit_animations = flutter_sdk.src__widgets__implicit_animations;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const box_border = flutter_sdk.src__painting__box_border;
  const key = flutter_sdk.src__foundation__key;
  const binding = flutter_sdk.src__widgets__binding;
  const basic_types = flutter_sdk.src__painting__basic_types;
  const recognizer = flutter_sdk.src__gestures__recognizer;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const assertions = flutter_sdk.src__foundation__assertions;
  const diagnostics = flutter_sdk.src__foundation__diagnostics;
  const animation = flutter_sdk.src__animation__animation;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const scroll_controller = flutter_sdk.src__widgets__scroll_controller;
  const scroll_physics = flutter_sdk.src__widgets__scroll_physics;
  const sliver_grid = flutter_sdk.src__rendering__sliver_grid;
  const events = flutter_sdk.src__gestures__events;
  const multidrag = flutter_sdk.src__gestures__multidrag;
  const overlay$ = flutter_sdk.src__widgets__overlay;
  const box = flutter_sdk.src__rendering__box;
  const curves = flutter_sdk.src__animation__curves;
  const inherited_theme = flutter_sdk.src__widgets__inherited_theme;
  const debug = flutter_sdk.src__widgets__debug;
  const sliver = flutter_sdk.src__widgets__sliver;
  const ticker_provider = flutter_sdk.src__widgets__ticker_provider;
  const drag = flutter_sdk.src__gestures__drag;
  const vector_math_64 = flutter_sdk.vector_math_64;
  const animation_controller = flutter_sdk.src__animation__animation_controller;
  const scrollable = flutter_sdk.src__widgets__scrollable;
  const ticker = flutter_sdk.src__scheduler__ticker;
  const media_query = flutter_sdk.src__widgets__media_query;
  const transitions = flutter_sdk.src__widgets__transitions;
  const semantics = flutter_sdk.src__semantics__semantics;
  const material_localizations = flutter_sdk.src__material__material_localizations;
  const platform = flutter_sdk.src__foundation__platform;
  const theme = flutter_sdk.src__material__theme;
  const material = flutter_sdk.src__material__material;
  const debug$ = flutter_sdk.src__material__debug;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var reorderable_grid = Object.create(dart.library);
  var reorderable_grid$ = Object.create(dart.library);
  var reorderable_grid_view = Object.create(dart.library);
  var typedefs = Object.create(dart.library);
  var $toString = dartx.toString;
  var $removeAt = dartx.removeAt;
  var $insert = dartx.insert;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $values = dartx.values;
  var $any = dartx.any;
  var $_equals = dartx._equals;
  var $abs = dartx.abs;
  var $runtimeType = dartx.runtimeType;
  var $every = dartx.every;
  var $length = dartx.length;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    intToint: () => (T.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    ValueKeyOfint: () => (T.ValueKeyOfint = dart.constFn(key.ValueKey$(core.int)))(),
    intToShoppingCartButton: () => (T.intToShoppingCartButton = dart.constFn(dart.fnType(main.ShoppingCartButton, [core.int])))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    GlobalKeyOfSliverReorderableGridState: () => (T.GlobalKeyOfSliverReorderableGridState = dart.constFn(framework.GlobalKey$(reorderable_grid$.SliverReorderableGridState)))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    IdentityMapOfint$_ReorderableItemState: () => (T.IdentityMapOfint$_ReorderableItemState = dart.constFn(_js_helper.IdentityMap$(core.int, reorderable_grid$._ReorderableItemState)))(),
    _ReorderableItemStateTobool: () => (T._ReorderableItemStateTobool = dart.constFn(dart.fnType(core.bool, [reorderable_grid$._ReorderableItemState])))(),
    RenderBoxN: () => (T.RenderBoxN = dart.constFn(dart.nullable(box.RenderBox)))(),
    AnimationStatusTovoid: () => (T.AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [animation.AnimationStatus])))(),
    PointerDownEventTovoid: () => (T.PointerDownEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerDownEvent])))(),
    WidgetN: () => (T.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToPositioned: () => (T.BuildContextAndWidgetNToPositioned = dart.constFn(dart.fnType(basic.Positioned, [framework.BuildContext, T.WidgetN()])))(),
    intTobool: () => (T.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    WidgetTobool: () => (T.WidgetTobool = dart.constFn(dart.fnType(core.bool, [framework.Widget])))(),
    BuildContextAndintToWidget: () => (T.BuildContextAndintToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, core.int])))(),
    intAndintTovoid: () => (T.intAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int])))(),
    LinkedMapOfCustomSemanticsAction$VoidTovoid: () => (T.LinkedMapOfCustomSemanticsAction$VoidTovoid = dart.constFn(_js_helper.LinkedMap$(semantics.CustomSemanticsAction, T.VoidTovoid())))(),
    BuildContextAndWidgetNToMaterial: () => (T.BuildContextAndWidgetNToMaterial = dart.constFn(dart.fnType(material.Material, [framework.BuildContext, T.WidgetN()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_Enum__name]: "vertical",
        [_Enum_index]: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: scroll_view.ScrollViewKeyboardDismissBehavior.prototype,
        [_Enum__name]: "manual",
        [_Enum_index]: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Clip.prototype,
        [_Enum__name]: "hardEdge",
        [_Enum_index]: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 14000
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 0,
        [SizedBox_width]: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 250000
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C10() {
      return C[10] = dart.fn(reorderable_grid_view.ReorderableGridView._defaultItemDragEnable, T.intTobool());
    },
    get C11() {
      return C[11] = dart.constList([], framework.Widget);
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "linux",
        [_Enum_index]: 3
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "windows",
        [_Enum_index]: 5
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "macOS",
        [_Enum_index]: 4
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "iOS",
        [_Enum_index]: 2
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "android",
        [_Enum_index]: 0
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "fuchsia",
        [_Enum_index]: 1
      });
    }
  }, false);
  var C = Array(18).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid-1.0.10/lib/src/reorderable_grid.dart",
    "package:reorderable_grid/src/reorderable_grid.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid-1.0.10/lib/src/reorderable_grid_view.dart",
    "package:reorderable_grid/src/reorderable_grid_view.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({title: "Flutter Demo", theme: theme_data.ThemeData.new({colorScheme: color_scheme.ColorScheme.fromSeed({seedColor: colors.Colors.deepPurple}), useMaterial3: true}), home: new main.BoxHolder.new()});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.ShoppingCartButton = class ShoppingCartButton extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.ShoppingCartButton.new({key: key});
    }
    createState() {
      return new main._ShoppingCartButtonState.new();
    }
  };
  (main.ShoppingCartButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.ShoppingCartButton.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.ShoppingCartButton.prototype;
  dart.addTypeTests(main.ShoppingCartButton);
  dart.addTypeCaches(main.ShoppingCartButton);
  dart.setMethodSignature(main.ShoppingCartButton, () => ({
    __proto__: dart.getMethods(main.ShoppingCartButton.__proto__),
    createState: dart.fnType(framework.State$(main.ShoppingCartButton), [])
  }));
  dart.setLibraryUri(main.ShoppingCartButton, I[0]);
  var Duration__duration = dart.privateName(core, "Duration._duration");
  main._ShoppingCartButtonState = class _ShoppingCartButtonState extends framework.State$(main.ShoppingCartButton) {
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Center.new({child: new gesture_detector.GestureDetector.new({onTap: dart.fn(() => {
              this.setState(dart.fn(() => {
                this.isExpanded = !this.isExpanded;
              }, T.VoidTovoid()));
            }, T.VoidTovoid()), child: new implicit_animations.AnimatedContainer.new({duration: C[1] || CT.C1, width: this.isExpanded ? 200 : 80, height: this.isExpanded ? 200 : 80, decoration: new box_decoration.BoxDecoration.new({color: this.isExpanded ? colors.Colors.blue : colors.Colors.red, borderRadius: new border_radius.BorderRadius.circular(10), border: box_border.Border.all({width: 3})})})})})});
    }
    static ['_#new#tearOff']() {
      return new main._ShoppingCartButtonState.new();
    }
  };
  (main._ShoppingCartButtonState.new = function() {
    this.isExpanded = false;
    main._ShoppingCartButtonState.__proto__.new.call(this);
    ;
  }).prototype = main._ShoppingCartButtonState.prototype;
  dart.addTypeTests(main._ShoppingCartButtonState);
  dart.addTypeCaches(main._ShoppingCartButtonState);
  dart.setMethodSignature(main._ShoppingCartButtonState, () => ({
    __proto__: dart.getMethods(main._ShoppingCartButtonState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._ShoppingCartButtonState, I[0]);
  dart.setFieldSignature(main._ShoppingCartButtonState, () => ({
    __proto__: dart.getFields(main._ShoppingCartButtonState.__proto__),
    isExpanded: dart.fieldType(core.bool)
  }));
  main.BoxHolder = class BoxHolder extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.BoxHolder.new({key: key});
    }
    createState() {
      return new main._BoxHolderState.new();
    }
  };
  (main.BoxHolder.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.BoxHolder.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.BoxHolder.prototype;
  dart.addTypeTests(main.BoxHolder);
  dart.addTypeCaches(main.BoxHolder);
  dart.setMethodSignature(main.BoxHolder, () => ({
    __proto__: dart.getMethods(main.BoxHolder.__proto__),
    createState: dart.fnType(framework.State$(main.BoxHolder), [])
  }));
  dart.setLibraryUri(main.BoxHolder, I[0]);
  var _onReorder = dart.privateName(main, "_onReorder");
  main._BoxHolderState = class _BoxHolderState extends framework.State$(main.BoxHolder) {
    [_onReorder](oldIndex, newIndex) {
      this.setState(dart.fn(() => {
        let item = this.items[$removeAt](oldIndex);
        this.items[$insert](newIndex, item);
      }, T.VoidTovoid()));
    }
    build(context) {
      return new app.MaterialApp.new({home: new scaffold.Scaffold.new({body: new reorderable_grid_view.ReorderableGridView.extent({maxCrossAxisExtent: 250, onReorder: dart.bind(this, _onReorder), childAspectRatio: 1, children: this.items[$map](main.ShoppingCartButton, dart.fn(item => new main.ShoppingCartButton.new({key: new (T.ValueKeyOfint()).new(item)}), T.intToShoppingCartButton()))[$toList]()})})});
    }
    static ['_#new#tearOff']() {
      return new main._BoxHolderState.new();
    }
  };
  (main._BoxHolderState.new = function() {
    this.items = T.ListOfint().generate(25, dart.fn(index => index, T.intToint()));
    main._BoxHolderState.__proto__.new.call(this);
    ;
  }).prototype = main._BoxHolderState.prototype;
  dart.addTypeTests(main._BoxHolderState);
  dart.addTypeCaches(main._BoxHolderState);
  dart.setMethodSignature(main._BoxHolderState, () => ({
    __proto__: dart.getMethods(main._BoxHolderState.__proto__),
    [_onReorder]: dart.fnType(dart.void, [core.int, core.int]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._BoxHolderState, I[0]);
  dart.setFieldSignature(main._BoxHolderState, () => ({
    __proto__: dart.getFields(main._BoxHolderState.__proto__),
    items: dart.finalFieldType(core.List$(core.int))
  }));
  main.main = function main$0() {
    binding.runApp(new main.MyApp.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var itemBuilder$ = dart.privateName(reorderable_grid$, "ReorderableGrid.itemBuilder");
  var itemCount$ = dart.privateName(reorderable_grid$, "ReorderableGrid.itemCount");
  var onReorder$ = dart.privateName(reorderable_grid$, "ReorderableGrid.onReorder");
  var onReorderStart$ = dart.privateName(reorderable_grid$, "ReorderableGrid.onReorderStart");
  var proxyDecorator$ = dart.privateName(reorderable_grid$, "ReorderableGrid.proxyDecorator");
  var padding$ = dart.privateName(reorderable_grid$, "ReorderableGrid.padding");
  var scrollDirection$ = dart.privateName(reorderable_grid$, "ReorderableGrid.scrollDirection");
  var reverse$ = dart.privateName(reorderable_grid$, "ReorderableGrid.reverse");
  var controller$ = dart.privateName(reorderable_grid$, "ReorderableGrid.controller");
  var primary$ = dart.privateName(reorderable_grid$, "ReorderableGrid.primary");
  var physics$ = dart.privateName(reorderable_grid$, "ReorderableGrid.physics");
  var shrinkWrap$ = dart.privateName(reorderable_grid$, "ReorderableGrid.shrinkWrap");
  var anchor$ = dart.privateName(reorderable_grid$, "ReorderableGrid.anchor");
  var cacheExtent$ = dart.privateName(reorderable_grid$, "ReorderableGrid.cacheExtent");
  var dragStartBehavior$ = dart.privateName(reorderable_grid$, "ReorderableGrid.dragStartBehavior");
  var keyboardDismissBehavior$ = dart.privateName(reorderable_grid$, "ReorderableGrid.keyboardDismissBehavior");
  var restorationId$ = dart.privateName(reorderable_grid$, "ReorderableGrid.restorationId");
  var clipBehavior$ = dart.privateName(reorderable_grid$, "ReorderableGrid.clipBehavior");
  var gridDelegate$ = dart.privateName(reorderable_grid$, "ReorderableGrid.gridDelegate");
  var autoScroll$ = dart.privateName(reorderable_grid$, "ReorderableGrid.autoScroll");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  reorderable_grid$.ReorderableGrid = class ReorderableGrid extends framework.StatefulWidget {
    get itemBuilder() {
      return this[itemBuilder$];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get itemCount() {
      return this[itemCount$];
    }
    set itemCount(value) {
      super.itemCount = value;
    }
    get onReorder() {
      return this[onReorder$];
    }
    set onReorder(value) {
      super.onReorder = value;
    }
    get onReorderStart() {
      return this[onReorderStart$];
    }
    set onReorderStart(value) {
      super.onReorderStart = value;
    }
    get proxyDecorator() {
      return this[proxyDecorator$];
    }
    set proxyDecorator(value) {
      super.proxyDecorator = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get scrollDirection() {
      return this[scrollDirection$];
    }
    set scrollDirection(value) {
      super.scrollDirection = value;
    }
    get reverse() {
      return this[reverse$];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get primary() {
      return this[primary$];
    }
    set primary(value) {
      super.primary = value;
    }
    get physics() {
      return this[physics$];
    }
    set physics(value) {
      super.physics = value;
    }
    get shrinkWrap() {
      return this[shrinkWrap$];
    }
    set shrinkWrap(value) {
      super.shrinkWrap = value;
    }
    get anchor() {
      return this[anchor$];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get cacheExtent() {
      return this[cacheExtent$];
    }
    set cacheExtent(value) {
      super.cacheExtent = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get keyboardDismissBehavior() {
      return this[keyboardDismissBehavior$];
    }
    set keyboardDismissBehavior(value) {
      super.keyboardDismissBehavior = value;
    }
    get restorationId() {
      return this[restorationId$];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    get clipBehavior() {
      return this[clipBehavior$];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get gridDelegate() {
      return this[gridDelegate$];
    }
    set gridDelegate(value) {
      super.gridDelegate = value;
    }
    get autoScroll() {
      return this[autoScroll$];
    }
    set autoScroll(value) {
      super.autoScroll = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
      let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
      let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
      let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
      let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
      let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
      let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
      let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
      return new reorderable_grid$.ReorderableGrid.new({key: key, itemBuilder: itemBuilder, itemCount: itemCount, onReorder: onReorder, gridDelegate: gridDelegate, proxyDecorator: proxyDecorator, padding: padding, scrollDirection: scrollDirection, reverse: reverse, controller: controller, primary: primary, physics: physics, shrinkWrap: shrinkWrap, anchor: anchor, cacheExtent: cacheExtent, dragStartBehavior: dragStartBehavior, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, clipBehavior: clipBehavior, autoScroll: autoScroll, onReorderStart: onReorderStart});
    }
    static of(context) {
      let result = context.findAncestorStateOfType(reorderable_grid$.ReorderableGridState);
      if (!dart.fn(() => {
        if (result == null) {
          dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("ReorderableGrid.of() called with a context that does not contain a ReorderableGrid."), new assertions.ErrorDescription.new("No ReorderableGrid ancestor could be found starting from the context that was passed to ReorderableGrid.of()."), new assertions.ErrorHint.new("This can happen when the context provided is from the same StatefulWidget that " + "built the ReorderableGrid. Please see the ReorderableGrid documentation for examples " + "of how to refer to an ReorderableGridState object:\n" + "  https://api.flutter.dev/flutter/widgets/ReorderableGridState-class.html"), context.describeElement("The context used was")])));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 151, 12, "() {\n      if (result == null) {\n        throw FlutterError.fromParts(<DiagnosticsNode>[\n          ErrorSummary(\n              'ReorderableGrid.of() called with a context that does not contain a ReorderableGrid.'),\n          ErrorDescription(\n            'No ReorderableGrid ancestor could be found starting from the context that was passed to ReorderableGrid.of().',\n          ),\n          ErrorHint(\n            'This can happen when the context provided is from the same StatefulWidget that '\n            'built the ReorderableGrid. Please see the ReorderableGrid documentation for examples '\n            'of how to refer to an ReorderableGridState object:\\n'\n            '  https://api.flutter.dev/flutter/widgets/ReorderableGridState-class.html',\n          ),\n          context.describeElement('The context used was'),\n        ]);\n      }\n      return true;\n    }()");
      return dart.nullCheck(result);
    }
    static maybeOf(context) {
      return context.findAncestorStateOfType(reorderable_grid$.ReorderableGridState);
    }
    createState() {
      return new reorderable_grid$.ReorderableGridState.new();
    }
  };
  (reorderable_grid$.ReorderableGrid.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
    let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let primary = opts && 'primary' in opts ? opts.primary : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
    let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
    let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
    let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
    let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
    this[itemBuilder$] = itemBuilder;
    this[itemCount$] = itemCount;
    this[onReorder$] = onReorder;
    this[gridDelegate$] = gridDelegate;
    this[proxyDecorator$] = proxyDecorator;
    this[padding$] = padding;
    this[scrollDirection$] = scrollDirection;
    this[reverse$] = reverse;
    this[controller$] = controller;
    this[primary$] = primary;
    this[physics$] = physics;
    this[shrinkWrap$] = shrinkWrap;
    this[anchor$] = anchor;
    this[cacheExtent$] = cacheExtent;
    this[dragStartBehavior$] = dragStartBehavior;
    this[keyboardDismissBehavior$] = keyboardDismissBehavior;
    this[restorationId$] = restorationId;
    this[clipBehavior$] = clipBehavior;
    this[autoScroll$] = autoScroll;
    this[onReorderStart$] = onReorderStart;
    if (!(itemCount >= 0)) dart.assertFailed(null, I[1], 57, 16, "itemCount >= 0");
    reorderable_grid$.ReorderableGrid.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid$.ReorderableGrid.prototype;
  dart.addTypeTests(reorderable_grid$.ReorderableGrid);
  dart.addTypeCaches(reorderable_grid$.ReorderableGrid);
  dart.setMethodSignature(reorderable_grid$.ReorderableGrid, () => ({
    __proto__: dart.getMethods(reorderable_grid$.ReorderableGrid.__proto__),
    createState: dart.fnType(reorderable_grid$.ReorderableGridState, [])
  }));
  dart.setStaticMethodSignature(reorderable_grid$.ReorderableGrid, () => ['of', 'maybeOf']);
  dart.setLibraryUri(reorderable_grid$.ReorderableGrid, I[2]);
  dart.setFieldSignature(reorderable_grid$.ReorderableGrid, () => ({
    __proto__: dart.getFields(reorderable_grid$.ReorderableGrid.__proto__),
    itemBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, core.int])),
    itemCount: dart.finalFieldType(core.int),
    onReorder: dart.finalFieldType(dart.fnType(dart.void, [core.int, core.int])),
    onReorderStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    proxyDecorator: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.Widget, core.int, animation.Animation$(core.double)]))),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    scrollDirection: dart.finalFieldType(basic_types.Axis),
    reverse: dart.finalFieldType(core.bool),
    controller: dart.finalFieldType(dart.nullable(scroll_controller.ScrollController)),
    primary: dart.finalFieldType(dart.nullable(core.bool)),
    physics: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    shrinkWrap: dart.finalFieldType(core.bool),
    anchor: dart.finalFieldType(core.double),
    cacheExtent: dart.finalFieldType(dart.nullable(core.double)),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    keyboardDismissBehavior: dart.finalFieldType(scroll_view.ScrollViewKeyboardDismissBehavior),
    restorationId: dart.finalFieldType(dart.nullable(core.String)),
    clipBehavior: dart.finalFieldType(ui.Clip),
    gridDelegate: dart.finalFieldType(sliver_grid.SliverGridDelegate),
    autoScroll: dart.finalFieldType(dart.nullable(core.bool))
  }));
  var _sliverReorderableGridKey = dart.privateName(reorderable_grid$, "_sliverReorderableGridKey");
  reorderable_grid$.ReorderableGridState = class ReorderableGridState extends framework.State$(reorderable_grid$.ReorderableGrid) {
    startItemDragReorder(opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      let event = opts && 'event' in opts ? opts.event : null;
      let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
      dart.nullCheck(this[_sliverReorderableGridKey].currentState).startItemDragReorder({index: index, event: event, recognizer: recognizer});
    }
    cancelReorder() {
      dart.nullCheck(this[_sliverReorderableGridKey].currentState).cancelReorder();
    }
    build(context) {
      let t0, t0$;
      return new scroll_view.CustomScrollView.new({scrollDirection: this.widget.scrollDirection, reverse: this.widget.reverse, controller: this.widget.controller, primary: this.widget.primary, physics: this.widget.physics, shrinkWrap: this.widget.shrinkWrap, anchor: this.widget.anchor, cacheExtent: this.widget.cacheExtent, dragStartBehavior: this.widget.dragStartBehavior, keyboardDismissBehavior: this.widget.keyboardDismissBehavior, restorationId: this.widget.restorationId, clipBehavior: this.widget.clipBehavior, slivers: T.JSArrayOfWidget().of([new basic.SliverPadding.new({padding: (t0 = this.widget.padding, t0 == null ? edge_insets.EdgeInsets.zero : t0), sliver: new reorderable_grid$.SliverReorderableGrid.new({key: this[_sliverReorderableGridKey], gridDelegate: this.widget.gridDelegate, itemBuilder: this.widget.itemBuilder, itemCount: this.widget.itemCount, onReorder: this.widget.onReorder, onReorderStart: this.widget.onReorderStart, proxyDecorator: this.widget.proxyDecorator, reverse: this.widget.reverse, autoScroll: (t0$ = this.widget.autoScroll, t0$ == null ? !scroll_physics.NeverScrollableScrollPhysics.is(this.widget.physics) : t0$), scrollDirection: this.widget.scrollDirection})})])});
    }
    static ['_#new#tearOff']() {
      return new reorderable_grid$.ReorderableGridState.new();
    }
  };
  (reorderable_grid$.ReorderableGridState.new = function() {
    this[_sliverReorderableGridKey] = T.GlobalKeyOfSliverReorderableGridState().new();
    reorderable_grid$.ReorderableGridState.__proto__.new.call(this);
    ;
  }).prototype = reorderable_grid$.ReorderableGridState.prototype;
  dart.addTypeTests(reorderable_grid$.ReorderableGridState);
  dart.addTypeCaches(reorderable_grid$.ReorderableGridState);
  dart.setMethodSignature(reorderable_grid$.ReorderableGridState, () => ({
    __proto__: dart.getMethods(reorderable_grid$.ReorderableGridState.__proto__),
    startItemDragReorder: dart.fnType(dart.void, [], {}, {event: events.PointerDownEvent, index: core.int, recognizer: multidrag.MultiDragGestureRecognizer}),
    cancelReorder: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(reorderable_grid$.ReorderableGridState, I[2]);
  dart.setFieldSignature(reorderable_grid$.ReorderableGridState, () => ({
    __proto__: dart.getFields(reorderable_grid$.ReorderableGridState.__proto__),
    [_sliverReorderableGridKey]: dart.finalFieldType(framework.GlobalKey$(reorderable_grid$.SliverReorderableGridState))
  }));
  var itemBuilder$0 = dart.privateName(reorderable_grid$, "SliverReorderableGrid.itemBuilder");
  var itemCount$0 = dart.privateName(reorderable_grid$, "SliverReorderableGrid.itemCount");
  var onReorder$0 = dart.privateName(reorderable_grid$, "SliverReorderableGrid.onReorder");
  var onReorderStart$0 = dart.privateName(reorderable_grid$, "SliverReorderableGrid.onReorderStart");
  var proxyDecorator$0 = dart.privateName(reorderable_grid$, "SliverReorderableGrid.proxyDecorator");
  var gridDelegate$0 = dart.privateName(reorderable_grid$, "SliverReorderableGrid.gridDelegate");
  var autoScroll$0 = dart.privateName(reorderable_grid$, "SliverReorderableGrid.autoScroll");
  var reverse$0 = dart.privateName(reorderable_grid$, "SliverReorderableGrid.reverse");
  var scrollDirection$0 = dart.privateName(reorderable_grid$, "SliverReorderableGrid.scrollDirection");
  reorderable_grid$.SliverReorderableGrid = class SliverReorderableGrid extends framework.StatefulWidget {
    get itemBuilder() {
      return this[itemBuilder$0];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get itemCount() {
      return this[itemCount$0];
    }
    set itemCount(value) {
      super.itemCount = value;
    }
    get onReorder() {
      return this[onReorder$0];
    }
    set onReorder(value) {
      super.onReorder = value;
    }
    get onReorderStart() {
      return this[onReorderStart$0];
    }
    set onReorderStart(value) {
      super.onReorderStart = value;
    }
    get proxyDecorator() {
      return this[proxyDecorator$0];
    }
    set proxyDecorator(value) {
      super.proxyDecorator = value;
    }
    get gridDelegate() {
      return this[gridDelegate$0];
    }
    set gridDelegate(value) {
      super.gridDelegate = value;
    }
    get autoScroll() {
      return this[autoScroll$0];
    }
    set autoScroll(value) {
      super.autoScroll = value;
    }
    get reverse() {
      return this[reverse$0];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get scrollDirection() {
      return this[scrollDirection$0];
    }
    set scrollDirection(value) {
      super.scrollDirection = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
      let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
      let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
      let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : true;
      let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
      return new reorderable_grid$.SliverReorderableGrid.new({key: key, itemBuilder: itemBuilder, itemCount: itemCount, onReorder: onReorder, gridDelegate: gridDelegate, onReorderStart: onReorderStart, reverse: reverse, proxyDecorator: proxyDecorator, autoScroll: autoScroll, scrollDirection: scrollDirection});
    }
    createState() {
      return new reorderable_grid$.SliverReorderableGridState.new();
    }
    static of(context) {
      let result = context.findAncestorStateOfType(reorderable_grid$.SliverReorderableGridState);
      if (!dart.fn(() => {
        if (result == null) {
          dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("SliverReorderableGrid.of() called with a context that does not contain a SliverReorderableGrid."), new assertions.ErrorDescription.new("No SliverReorderableGrid ancestor could be found starting from the context that was passed to SliverReorderableGrid.of()."), new assertions.ErrorHint.new("This can happen when the context provided is from the same StatefulWidget that " + "built the SliverReorderableGrid. Please see the SliverReorderableGrid documentation for examples"), context.describeElement("The context used was")])));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 369, 12, "() {\n      if (result == null) {\n        throw FlutterError.fromParts(<DiagnosticsNode>[\n          ErrorSummary(\n            'SliverReorderableGrid.of() called with a context that does not contain a SliverReorderableGrid.',\n          ),\n          ErrorDescription(\n            'No SliverReorderableGrid ancestor could be found starting from the context that was passed to SliverReorderableGrid.of().',\n          ),\n          ErrorHint(\n              'This can happen when the context provided is from the same StatefulWidget that '\n              'built the SliverReorderableGrid. Please see the SliverReorderableGrid documentation for examples'),\n          context.describeElement('The context used was'),\n        ]);\n      }\n      return true;\n    }()");
      return dart.nullCheck(result);
    }
    static maybeOf(context) {
      return context.findAncestorStateOfType(reorderable_grid$.SliverReorderableGridState);
    }
  };
  (reorderable_grid$.SliverReorderableGrid.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
    let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
    let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : true;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
    this[itemBuilder$0] = itemBuilder;
    this[itemCount$0] = itemCount;
    this[onReorder$0] = onReorder;
    this[gridDelegate$0] = gridDelegate;
    this[onReorderStart$0] = onReorderStart;
    this[reverse$0] = reverse;
    this[proxyDecorator$0] = proxyDecorator;
    this[autoScroll$0] = autoScroll;
    this[scrollDirection$0] = scrollDirection;
    if (!(itemCount >= 0)) dart.assertFailed(null, I[1], 318, 16, "itemCount >= 0");
    reorderable_grid$.SliverReorderableGrid.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid$.SliverReorderableGrid.prototype;
  dart.addTypeTests(reorderable_grid$.SliverReorderableGrid);
  dart.addTypeCaches(reorderable_grid$.SliverReorderableGrid);
  dart.setMethodSignature(reorderable_grid$.SliverReorderableGrid, () => ({
    __proto__: dart.getMethods(reorderable_grid$.SliverReorderableGrid.__proto__),
    createState: dart.fnType(reorderable_grid$.SliverReorderableGridState, [])
  }));
  dart.setStaticMethodSignature(reorderable_grid$.SliverReorderableGrid, () => ['of', 'maybeOf']);
  dart.setLibraryUri(reorderable_grid$.SliverReorderableGrid, I[2]);
  dart.setFieldSignature(reorderable_grid$.SliverReorderableGrid, () => ({
    __proto__: dart.getFields(reorderable_grid$.SliverReorderableGrid.__proto__),
    itemBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, core.int])),
    itemCount: dart.finalFieldType(core.int),
    onReorder: dart.finalFieldType(dart.fnType(dart.void, [core.int, core.int])),
    onReorderStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    proxyDecorator: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.Widget, core.int, animation.Animation$(core.double)]))),
    gridDelegate: dart.finalFieldType(sliver_grid.SliverGridDelegate),
    autoScroll: dart.finalFieldType(core.bool),
    reverse: dart.finalFieldType(core.bool),
    scrollDirection: dart.finalFieldType(basic_types.Axis)
  }));
  var _items = dart.privateName(reorderable_grid$, "_items");
  var _overlayEntry = dart.privateName(reorderable_grid$, "_overlayEntry");
  var _dragIndex = dart.privateName(reorderable_grid$, "_dragIndex");
  var _dragInfo = dart.privateName(reorderable_grid$, "_dragInfo");
  var _insertIndex = dart.privateName(reorderable_grid$, "_insertIndex");
  var _finalDropPosition = dart.privateName(reorderable_grid$, "_finalDropPosition");
  var _recognizer = dart.privateName(reorderable_grid$, "_recognizer");
  var _autoScrolling = dart.privateName(reorderable_grid$, "_autoScrolling");
  var _dragStart = dart.privateName(reorderable_grid$, "_dragStart");
  var _dragReset = dart.privateName(reorderable_grid$, "_dragReset");
  var _registerItem = dart.privateName(reorderable_grid$, "_registerItem");
  var _unregisterItem = dart.privateName(reorderable_grid$, "_unregisterItem");
  var _dragUpdate = dart.privateName(reorderable_grid$, "_dragUpdate");
  var _dragCancel = dart.privateName(reorderable_grid$, "_dragCancel");
  var _dragEnd = dart.privateName(reorderable_grid$, "_dragEnd");
  var _dropCompleted = dart.privateName(reorderable_grid$, "_dropCompleted");
  var _dragUpdateItems = dart.privateName(reorderable_grid$, "_dragUpdateItems");
  var _autoScrollIfNecessary = dart.privateName(reorderable_grid$, "_autoScrollIfNecessary");
  var _itemOffsetAt = dart.privateName(reorderable_grid$, "_itemOffsetAt");
  var _dragging = dart.privateName(reorderable_grid$, "_dragging");
  var _resetItemGap = dart.privateName(reorderable_grid$, "_resetItemGap");
  var _calculateNextDragOffset = dart.privateName(reorderable_grid$, "_calculateNextDragOffset");
  var _itemBuilder = dart.privateName(reorderable_grid$, "_itemBuilder");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(reorderable_grid$.SliverReorderableGrid) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(reorderable_grid$.SliverReorderableGrid)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(reorderable_grid$.SliverReorderableGrid));
  reorderable_grid$.SliverReorderableGridState = class SliverReorderableGridState extends State_TickerProviderStateMixin$36 {
    didUpdateWidget(oldWidget) {
      reorderable_grid$.SliverReorderableGrid.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (this.widget.itemCount !== oldWidget.itemCount) {
        this.cancelReorder();
      }
    }
    dispose() {
      let t0;
      t0 = this[_dragInfo];
      t0 == null ? null : t0.dispose();
      super.dispose();
    }
    startItemDragReorder(opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      let event = opts && 'event' in opts ? opts.event : null;
      let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
      if (!(0 <= index && index < this.widget.itemCount)) dart.assertFailed(null, I[1], 470, 12, "0 <= index && index < widget.itemCount");
      this.setState(dart.fn(() => {
        let t0;
        if (this[_dragInfo] != null) {
          this.cancelReorder();
        }
        if (this[_items][$containsKey](index)) {
          this[_dragIndex] = index;
          this[_recognizer] = (t0 = recognizer, (() => {
            t0.onStart = dart.bind(this, _dragStart);
            t0.addPointer(event);
            return t0;
          })());
        } else {
          dart.throw(core.Exception.new("Attempting to start a drag on a non-visible item"));
        }
      }, T.VoidTovoid()));
    }
    cancelReorder() {
      this[_dragReset]();
    }
    [_registerItem](item) {
      let t0;
      this[_items][$_set](item.index, item);
      if (item.index === (t0 = this[_dragInfo], t0 == null ? null : t0.index)) {
        item.dragging = true;
        item.rebuild();
      }
    }
    [_unregisterItem](index, item) {
      let currentItem = this[_items][$_get](index);
      if (dart.equals(currentItem, item)) {
        this[_items][$remove](index);
      }
    }
    [_dragStart](position) {
      let t0;
      if (!(this[_dragInfo] == null)) dart.assertFailed(null, I[1], 516, 12, "_dragInfo == null");
      if (this[_items][$values][$any](dart.fn(e => e.dragging, T._ReorderableItemStateTobool()))) return null;
      let item = dart.nullCheck(this[_items][$_get](dart.nullCheck(this[_dragIndex])));
      item.dragging = true;
      item.rebuild();
      t0 = this.widget.onReorderStart;
      t0 == null ? null : t0(dart.nullCheck(this[_dragIndex]));
      this[_insertIndex] = item.index;
      this[_dragInfo] = new reorderable_grid$._DragInfo.new({item: item, initialPosition: position, onUpdate: dart.bind(this, _dragUpdate), onCancel: dart.bind(this, _dragCancel), onEnd: dart.bind(this, _dragEnd), onDropCompleted: dart.bind(this, _dropCompleted), proxyDecorator: this.widget.proxyDecorator, tickerProvider: this});
      dart.nullCheck(this[_dragInfo]).startDrag();
      let overlay = overlay$.Overlay.of(this.context);
      if (!(this[_overlayEntry] == null)) dart.assertFailed(null, I[1], 541, 12, "_overlayEntry == null");
      this[_overlayEntry] = new overlay$.OverlayEntry.new({builder: dart.bind(dart.nullCheck(this[_dragInfo]), 'createProxy')});
      overlay.insert(dart.nullCheck(this[_overlayEntry]));
      for (let childItem of this[_items][$values]) {
        if (childItem[$_equals](item) || !childItem.mounted) continue;
        childItem.updateForGap(dart.nullCheck(this[_insertIndex]), false);
      }
      return this[_dragInfo];
    }
    [_dragUpdate](item, position, delta) {
      this.setState(dart.fn(() => {
        let t0;
        t0 = this[_overlayEntry];
        t0 == null ? null : t0.markNeedsBuild();
        this[_dragUpdateItems]();
        this[_autoScrollIfNecessary]();
      }, T.VoidTovoid()));
    }
    [_dragCancel](item) {
      this[_dragReset]();
    }
    [_dragEnd](item) {
      this.setState(dart.fn(() => this[_finalDropPosition] = this[_itemOffsetAt](dart.nullCheck(this[_insertIndex])), T.VoidTovoid()));
    }
    [_dropCompleted]() {
      let fromIndex = dart.nullCheck(this[_dragIndex]);
      let toIndex = dart.nullCheck(this[_insertIndex]);
      if (fromIndex !== toIndex) {
        this.widget.onReorder(fromIndex, toIndex);
      }
      this[_dragReset]();
    }
    [_dragReset]() {
      this.setState(dart.fn(() => {
        let t0, t0$, t0$0;
        if (this[_dragInfo] != null) {
          if (this[_dragIndex] != null && this[_items][$containsKey](this[_dragIndex])) {
            let dragItem = dart.nullCheck(this[_items][$_get](dart.nullCheck(this[_dragIndex])));
            dragItem[_dragging] = false;
            dragItem.rebuild();
            this[_dragIndex] = null;
          }
          t0 = this[_dragInfo];
          t0 == null ? null : t0.dispose();
          this[_dragInfo] = null;
          this[_resetItemGap]();
          t0$ = this[_recognizer];
          t0$ == null ? null : t0$.dispose();
          this[_recognizer] = null;
          t0$0 = this[_overlayEntry];
          t0$0 == null ? null : t0$0.remove();
          this[_overlayEntry] = null;
          this[_finalDropPosition] = null;
        }
      }, T.VoidTovoid()));
    }
    [_resetItemGap]() {
      for (let item of this[_items][$values]) {
        item.resetGap();
      }
    }
    [_dragUpdateItems]() {
      if (!(this[_dragInfo] != null)) dart.assertFailed(null, I[1], 605, 12, "_dragInfo != null");
      let newIndex = dart.nullCheck(this[_insertIndex]);
      let dragCenter = dart.nullCheck(this[_dragInfo]).itemSize.center(dart.nullCheck(this[_dragInfo]).dragPosition['-'](dart.nullCheck(this[_dragInfo]).dragOffset));
      for (let item of this[_items][$values]) {
        if (!item.mounted) continue;
        let geometry = item.targetGeometryNonOffset();
        if (geometry.contains(dragCenter)) {
          newIndex = item.index;
          break;
        }
      }
      if (newIndex === this[_insertIndex]) return;
      this[_insertIndex] = newIndex;
      for (let item of this[_items][$values]) {
        item.updateForGap(dart.nullCheck(this[_insertIndex]), true);
      }
    }
    [_autoScrollIfNecessary]() {
      return async.async(dart.void, (function* _autoScrollIfNecessary$() {
        if (this[_autoScrolling] || this[_dragInfo] == null || dart.nullCheck(this[_dragInfo]).scrollable == null || this.widget.autoScroll === false) {
          return;
        }
        let position = dart.nullCheck(dart.nullCheck(this[_dragInfo]).scrollable).position;
        let newOffset = null;
        let duration = C[6] || CT.C6;
        let isVertical = this.widget.scrollDirection === basic_types.Axis.vertical;
        let isReversed = this.widget.reverse;
        let scrollRenderBox = box.RenderBox.as(dart.nullCheck(dart.nullCheck(dart.nullCheck(this[_dragInfo]).scrollable).context.findRenderObject()));
        let scrollPosition = scrollRenderBox.localToGlobal(ui.Offset.zero);
        let scrollWindowStart = isVertical ? scrollPosition.dy : scrollPosition.dx;
        let scrollWindowEnd = scrollWindowStart + (isVertical ? scrollRenderBox.size.height : scrollRenderBox.size.width);
        let proxyObjectPosition = dart.nullCheck(this[_dragInfo]).dragPosition['-'](dart.nullCheck(this[_dragInfo]).dragOffset);
        let proxyObjectStart = isVertical ? proxyObjectPosition.dy : proxyObjectPosition.dx;
        let proxyObjectEnd = proxyObjectStart + (isVertical ? dart.nullCheck(this[_dragInfo]).itemSize.height : dart.nullCheck(this[_dragInfo]).itemSize.width);
        if (!isReversed) {
          if (proxyObjectStart < scrollWindowStart && position.pixels > position.minScrollExtent) {
            let overDrag = math.max(core.double, scrollWindowStart - proxyObjectStart, 20);
            newOffset = math.max(core.double, position.minScrollExtent, position.pixels - 1 * overDrag / 10);
          } else if (proxyObjectEnd > scrollWindowEnd && position.pixels < position.maxScrollExtent) {
            let overDrag = math.max(core.double, proxyObjectEnd - scrollWindowEnd, 20);
            newOffset = math.min(core.double, position.maxScrollExtent, position.pixels + 1 * overDrag / 10);
          }
        } else {
          if (proxyObjectStart < scrollWindowStart && position.pixels < position.maxScrollExtent) {
            let overDrag = math.max(core.double, scrollWindowStart - proxyObjectStart, 20);
            newOffset = math.max(core.double, position.minScrollExtent, position.pixels + 1 * overDrag / 10);
          } else if (proxyObjectEnd > scrollWindowEnd && position.pixels > position.minScrollExtent) {
            let overDrag = math.max(core.double, proxyObjectEnd - scrollWindowEnd, 20);
            newOffset = math.min(core.double, position.maxScrollExtent, position.pixels - 1 * overDrag / 10);
          }
        }
        if (newOffset != null && (dart.notNull(newOffset) - position.pixels)[$abs]() >= 1) {
          this[_autoScrolling] = true;
          yield position.animateTo(newOffset, {duration: duration, curve: curves.Curves.linear});
          this[_autoScrolling] = false;
          if (this[_dragInfo] != null) {
            this[_dragUpdateItems]();
            this[_autoScrollIfNecessary]();
          }
        }
      }).bind(this));
    }
    [_calculateNextDragOffset](index) {
      let minPos = math.min(core.int, dart.nullCheck(this[_dragIndex]), dart.nullCheck(this[_insertIndex]));
      let maxPos = math.max(core.int, dart.nullCheck(this[_dragIndex]), dart.nullCheck(this[_insertIndex]));
      if (index < minPos || index > maxPos) return ui.Offset.zero;
      let direction = dart.nullCheck(this[_insertIndex]) > dart.nullCheck(this[_dragIndex]) ? -1 : 1;
      return this[_itemOffsetAt](index + direction)['-'](this[_itemOffsetAt](index));
    }
    [_itemOffsetAt](index) {
      let t0;
      let box = T.RenderBoxN().as((t0 = this[_items][$_get](index), t0 == null ? null : t0.context.findRenderObject()));
      if (box == null) return ui.Offset.zero;
      return box.localToGlobal(ui.Offset.zero);
    }
    [_itemBuilder](context, index) {
      let t2, t1, t0;
      if (this[_dragInfo] != null && index >= this.widget.itemCount) {
        return new basic.SizedBox.fromSize({size: dart.nullCheck(this[_dragInfo]).itemSize});
      }
      let child = (t0 = this.widget, t1 = context, t2 = index, t0.itemBuilder(t1, t2));
      if (!(child.key != null)) dart.assertFailed("All grid items must have a key", I[1], 742, 12, "child.key != null");
      let overlay = overlay$.Overlay.of(context);
      return new reorderable_grid$._ReorderableItem.new({key: new reorderable_grid$._ReorderableItemGlobalKey.new(dart.nullCheck(child.key), index, this), index: index, capturedThemes: inherited_theme.InheritedTheme.capture({from: context, to: overlay.context}), child: child});
    }
    build(context) {
      if (!debug.debugCheckHasOverlay(context)) dart.assertFailed(null, I[1], 756, 12, "debugCheckHasOverlay(context)");
      let childrenDelegate = new sliver.SliverChildBuilderDelegate.new(dart.bind(this, _itemBuilder), {childCount: this.widget.itemCount});
      return new sliver.SliverGrid.new({delegate: childrenDelegate, gridDelegate: this.widget.gridDelegate});
    }
    static ['_#new#tearOff']() {
      return new reorderable_grid$.SliverReorderableGridState.new();
    }
  };
  (reorderable_grid$.SliverReorderableGridState.new = function() {
    this[_items] = new (T.IdentityMapOfint$_ReorderableItemState()).new();
    this[_overlayEntry] = null;
    this[_dragIndex] = null;
    this[_dragInfo] = null;
    this[_insertIndex] = null;
    this[_finalDropPosition] = null;
    this[_recognizer] = null;
    this[_autoScrolling] = false;
    reorderable_grid$.SliverReorderableGridState.__proto__.new.call(this);
    ;
  }).prototype = reorderable_grid$.SliverReorderableGridState.prototype;
  dart.addTypeTests(reorderable_grid$.SliverReorderableGridState);
  dart.addTypeCaches(reorderable_grid$.SliverReorderableGridState);
  dart.setMethodSignature(reorderable_grid$.SliverReorderableGridState, () => ({
    __proto__: dart.getMethods(reorderable_grid$.SliverReorderableGridState.__proto__),
    startItemDragReorder: dart.fnType(dart.void, [], {}, {event: events.PointerDownEvent, index: core.int, recognizer: multidrag.MultiDragGestureRecognizer}),
    cancelReorder: dart.fnType(dart.void, []),
    [_registerItem]: dart.fnType(dart.void, [reorderable_grid$._ReorderableItemState]),
    [_unregisterItem]: dart.fnType(dart.void, [core.int, reorderable_grid$._ReorderableItemState]),
    [_dragStart]: dart.fnType(dart.nullable(drag.Drag), [ui.Offset]),
    [_dragUpdate]: dart.fnType(dart.void, [reorderable_grid$._DragInfo, ui.Offset, ui.Offset]),
    [_dragCancel]: dart.fnType(dart.void, [reorderable_grid$._DragInfo]),
    [_dragEnd]: dart.fnType(dart.void, [reorderable_grid$._DragInfo]),
    [_dropCompleted]: dart.fnType(dart.void, []),
    [_dragReset]: dart.fnType(dart.void, []),
    [_resetItemGap]: dart.fnType(dart.void, []),
    [_dragUpdateItems]: dart.fnType(dart.void, []),
    [_autoScrollIfNecessary]: dart.fnType(async.Future$(dart.void), []),
    [_calculateNextDragOffset]: dart.fnType(ui.Offset, [core.int]),
    [_itemOffsetAt]: dart.fnType(ui.Offset, [core.int]),
    [_itemBuilder]: dart.fnType(framework.Widget, [framework.BuildContext, core.int]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(reorderable_grid$.SliverReorderableGridState, I[2]);
  dart.setFieldSignature(reorderable_grid$.SliverReorderableGridState, () => ({
    __proto__: dart.getFields(reorderable_grid$.SliverReorderableGridState.__proto__),
    [_items]: dart.finalFieldType(core.Map$(core.int, reorderable_grid$._ReorderableItemState)),
    [_overlayEntry]: dart.fieldType(dart.nullable(overlay$.OverlayEntry)),
    [_dragIndex]: dart.fieldType(dart.nullable(core.int)),
    [_dragInfo]: dart.fieldType(dart.nullable(reorderable_grid$._DragInfo)),
    [_insertIndex]: dart.fieldType(dart.nullable(core.int)),
    [_finalDropPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [_recognizer]: dart.fieldType(dart.nullable(multidrag.MultiDragGestureRecognizer)),
    [_autoScrolling]: dart.fieldType(core.bool)
  }));
  var index$ = dart.privateName(reorderable_grid$, "_ReorderableItem.index");
  var child$ = dart.privateName(reorderable_grid$, "_ReorderableItem.child");
  var capturedThemes$ = dart.privateName(reorderable_grid$, "_ReorderableItem.capturedThemes");
  reorderable_grid$._ReorderableItem = class _ReorderableItem extends framework.StatefulWidget {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get capturedThemes() {
      return this[capturedThemes$];
    }
    set capturedThemes(value) {
      super.capturedThemes = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let capturedThemes = opts && 'capturedThemes' in opts ? opts.capturedThemes : null;
      return new reorderable_grid$._ReorderableItem.new({key: key, index: index, child: child, capturedThemes: capturedThemes});
    }
    createState() {
      return new reorderable_grid$._ReorderableItemState.new();
    }
  };
  (reorderable_grid$._ReorderableItem.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let index = opts && 'index' in opts ? opts.index : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let capturedThemes = opts && 'capturedThemes' in opts ? opts.capturedThemes : null;
    this[index$] = index;
    this[child$] = child;
    this[capturedThemes$] = capturedThemes;
    reorderable_grid$._ReorderableItem.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid$._ReorderableItem.prototype;
  dart.addTypeTests(reorderable_grid$._ReorderableItem);
  dart.addTypeCaches(reorderable_grid$._ReorderableItem);
  dart.setMethodSignature(reorderable_grid$._ReorderableItem, () => ({
    __proto__: dart.getMethods(reorderable_grid$._ReorderableItem.__proto__),
    createState: dart.fnType(reorderable_grid$._ReorderableItemState, [])
  }));
  dart.setLibraryUri(reorderable_grid$._ReorderableItem, I[2]);
  dart.setFieldSignature(reorderable_grid$._ReorderableItem, () => ({
    __proto__: dart.getFields(reorderable_grid$._ReorderableItem.__proto__),
    index: dart.finalFieldType(core.int),
    child: dart.finalFieldType(framework.Widget),
    capturedThemes: dart.finalFieldType(inherited_theme.CapturedThemes)
  }));
  var ___ReorderableItemState__listState = dart.privateName(reorderable_grid$, "_#_ReorderableItemState#_listState");
  var _startOffset = dart.privateName(reorderable_grid$, "_startOffset");
  var _targetOffset = dart.privateName(reorderable_grid$, "_targetOffset");
  var _offsetAnimation = dart.privateName(reorderable_grid$, "_offsetAnimation");
  var _listState = dart.privateName(reorderable_grid$, "_listState");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var SizedBox_height = dart.privateName(basic, "SizedBox.height");
  var SizedBox_width = dart.privateName(basic, "SizedBox.width");
  reorderable_grid$._ReorderableItemState = class _ReorderableItemState extends framework.State$(reorderable_grid$._ReorderableItem) {
    get [_listState]() {
      let t0;
      t0 = this[___ReorderableItemState__listState];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_listState")) : t0;
    }
    set [_listState](_listState$35param) {
      this[___ReorderableItemState__listState] = _listState$35param;
    }
    get key() {
      return dart.nullCheck(this.widget.key);
    }
    get index() {
      return this.widget.index;
    }
    get dragging() {
      return this[_dragging];
    }
    set dragging(dragging) {
      if (this.mounted) {
        this.setState(dart.fn(() => {
          this[_dragging] = dragging;
        }, T.VoidTovoid()));
      }
    }
    initState() {
      this[_listState] = reorderable_grid$.SliverReorderableGrid.of(this.context);
      this[_listState][_registerItem](this);
      super.initState();
    }
    dispose() {
      let t0;
      t0 = this[_offsetAnimation];
      t0 == null ? null : t0.dispose();
      this[_listState][_unregisterItem](this.index, this);
      super.dispose();
    }
    didUpdateWidget(oldWidget) {
      reorderable_grid$._ReorderableItem.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (oldWidget.index !== this.widget.index) {
        this[_listState][_unregisterItem](oldWidget.index, this);
        this[_listState][_registerItem](this);
      }
    }
    build(context) {
      if (this[_dragging]) {
        return C[7] || CT.C7;
      }
      this[_listState][_registerItem](this);
      return new basic.Transform.new({transform: vector_math_64.Matrix4.translationValues(this.offset.dx, this.offset.dy, 0), child: this.widget.child});
    }
    deactivate() {
      this[_listState][_unregisterItem](this.index, this);
      super.deactivate();
    }
    get offset() {
      if (this[_offsetAnimation] != null) {
        let animValue = curves.Curves.easeInOut.transform(dart.nullCheck(this[_offsetAnimation]).value);
        return dart.nullCheck(ui.Offset.lerp(this[_startOffset], this[_targetOffset], animValue));
      }
      return this[_targetOffset];
    }
    updateForGap(gapIndex, animate) {
      let t0;
      if (!this.mounted) return;
      let newTargetOffset = this[_listState][_calculateNextDragOffset](this.index);
      if (newTargetOffset._equals(this[_targetOffset])) return;
      this[_targetOffset] = newTargetOffset;
      if (animate) {
        if (this[_offsetAnimation] == null) {
          this[_offsetAnimation] = (t0 = new animation_controller.AnimationController.new({vsync: this[_listState], duration: C[8] || CT.C8}), (() => {
            t0.addListener(dart.bind(this, 'rebuild'));
            t0.addStatusListener(dart.fn(status => {
              if (status === animation.AnimationStatus.completed) {
                this[_startOffset] = this[_targetOffset];
                dart.nullCheck(this[_offsetAnimation]).dispose();
                this[_offsetAnimation] = null;
              }
            }, T.AnimationStatusTovoid()));
            t0.forward();
            return t0;
          })());
        } else {
          this[_startOffset] = this.offset;
          dart.nullCheck(this[_offsetAnimation]).forward({from: 0});
        }
      } else {
        if (this[_offsetAnimation] != null) {
          dart.nullCheck(this[_offsetAnimation]).dispose();
          this[_offsetAnimation] = null;
        }
        this[_startOffset] = this[_targetOffset];
      }
      this.rebuild();
    }
    resetGap() {
      if (this[_offsetAnimation] != null) {
        dart.nullCheck(this[_offsetAnimation]).dispose();
        this[_offsetAnimation] = null;
      }
      this[_startOffset] = ui.Offset.zero;
      this[_targetOffset] = ui.Offset.zero;
      this.rebuild();
    }
    targetGeometry() {
      let itemRenderBox = box.RenderBox.as(dart.nullCheck(this.context.findRenderObject()));
      let itemPosition = itemRenderBox.localToGlobal(ui.Offset.zero)['+'](this[_targetOffset]);
      return itemPosition['&'](itemRenderBox.size);
    }
    targetGeometryNonOffset() {
      let itemRenderBox = box.RenderBox.as(dart.nullCheck(this.context.findRenderObject()));
      let itemPosition = itemRenderBox.localToGlobal(ui.Offset.zero);
      return itemPosition['&'](itemRenderBox.size);
    }
    rebuild() {
      if (this.mounted) {
        this.setState(dart.fn(() => {
        }, T.VoidTovoid()));
      }
    }
    static ['_#new#tearOff']() {
      return new reorderable_grid$._ReorderableItemState.new();
    }
  };
  (reorderable_grid$._ReorderableItemState.new = function() {
    this[___ReorderableItemState__listState] = null;
    this[_startOffset] = ui.Offset.zero;
    this[_targetOffset] = ui.Offset.zero;
    this[_offsetAnimation] = null;
    this[_dragging] = false;
    reorderable_grid$._ReorderableItemState.__proto__.new.call(this);
    ;
  }).prototype = reorderable_grid$._ReorderableItemState.prototype;
  dart.addTypeTests(reorderable_grid$._ReorderableItemState);
  dart.addTypeCaches(reorderable_grid$._ReorderableItemState);
  dart.setMethodSignature(reorderable_grid$._ReorderableItemState, () => ({
    __proto__: dart.getMethods(reorderable_grid$._ReorderableItemState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    updateForGap: dart.fnType(dart.void, [core.int, core.bool]),
    resetGap: dart.fnType(dart.void, []),
    targetGeometry: dart.fnType(ui.Rect, []),
    targetGeometryNonOffset: dart.fnType(ui.Rect, []),
    rebuild: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(reorderable_grid$._ReorderableItemState, () => ({
    __proto__: dart.getGetters(reorderable_grid$._ReorderableItemState.__proto__),
    [_listState]: reorderable_grid$.SliverReorderableGridState,
    key: key.Key,
    index: core.int,
    dragging: core.bool,
    offset: ui.Offset
  }));
  dart.setSetterSignature(reorderable_grid$._ReorderableItemState, () => ({
    __proto__: dart.getSetters(reorderable_grid$._ReorderableItemState.__proto__),
    [_listState]: reorderable_grid$.SliverReorderableGridState,
    dragging: core.bool
  }));
  dart.setLibraryUri(reorderable_grid$._ReorderableItemState, I[2]);
  dart.setFieldSignature(reorderable_grid$._ReorderableItemState, () => ({
    __proto__: dart.getFields(reorderable_grid$._ReorderableItemState.__proto__),
    [___ReorderableItemState__listState]: dart.fieldType(dart.nullable(reorderable_grid$.SliverReorderableGridState)),
    [_startOffset]: dart.fieldType(ui.Offset),
    [_targetOffset]: dart.fieldType(ui.Offset),
    [_offsetAnimation]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [_dragging]: dart.fieldType(core.bool)
  }));
  var child$0 = dart.privateName(reorderable_grid$, "ReorderableGridDragStartListener.child");
  var index$0 = dart.privateName(reorderable_grid$, "ReorderableGridDragStartListener.index");
  var enabled$ = dart.privateName(reorderable_grid$, "ReorderableGridDragStartListener.enabled");
  var _startDragging = dart.privateName(reorderable_grid$, "_startDragging");
  reorderable_grid$.ReorderableGridDragStartListener = class ReorderableGridDragStartListener extends framework.StatelessWidget {
    get child() {
      return this[child$0];
    }
    set child(value) {
      super.child = value;
    }
    get index() {
      return this[index$0];
    }
    set index(value) {
      super.index = value;
    }
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      super.enabled = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let enabled = opts && 'enabled' in opts ? opts.enabled : true;
      return new reorderable_grid$.ReorderableGridDragStartListener.new({key: key, child: child, index: index, enabled: enabled});
    }
    build(context) {
      return new basic.Listener.new({onPointerDown: this.enabled ? dart.fn(event => this[_startDragging](context, event), T.PointerDownEventTovoid()) : null, child: this.child});
    }
    createRecognizer() {
      return new multidrag.ImmediateMultiDragGestureRecognizer.new({debugOwner: this});
    }
    [_startDragging](context, event) {
      let t0;
      let list = reorderable_grid$.SliverReorderableGrid.maybeOf(context);
      t0 = list;
      t0 == null ? null : t0.startItemDragReorder({index: this.index, event: event, recognizer: this.createRecognizer()});
    }
  };
  (reorderable_grid$.ReorderableGridDragStartListener.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let index = opts && 'index' in opts ? opts.index : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : true;
    this[child$0] = child;
    this[index$0] = index;
    this[enabled$] = enabled;
    reorderable_grid$.ReorderableGridDragStartListener.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid$.ReorderableGridDragStartListener.prototype;
  dart.addTypeTests(reorderable_grid$.ReorderableGridDragStartListener);
  dart.addTypeCaches(reorderable_grid$.ReorderableGridDragStartListener);
  dart.setMethodSignature(reorderable_grid$.ReorderableGridDragStartListener, () => ({
    __proto__: dart.getMethods(reorderable_grid$.ReorderableGridDragStartListener.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    createRecognizer: dart.fnType(multidrag.MultiDragGestureRecognizer, []),
    [_startDragging]: dart.fnType(dart.void, [framework.BuildContext, events.PointerDownEvent])
  }));
  dart.setLibraryUri(reorderable_grid$.ReorderableGridDragStartListener, I[2]);
  dart.setFieldSignature(reorderable_grid$.ReorderableGridDragStartListener, () => ({
    __proto__: dart.getFields(reorderable_grid$.ReorderableGridDragStartListener.__proto__),
    child: dart.finalFieldType(framework.Widget),
    index: dart.finalFieldType(core.int),
    enabled: dart.finalFieldType(core.bool)
  }));
  reorderable_grid$.ReorderableGridDelayedDragStartListener = class ReorderableGridDelayedDragStartListener extends reorderable_grid$.ReorderableGridDragStartListener {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let enabled = opts && 'enabled' in opts ? opts.enabled : true;
      return new reorderable_grid$.ReorderableGridDelayedDragStartListener.new({key: key, child: child, index: index, enabled: enabled});
    }
    createRecognizer() {
      return new multidrag.DelayedMultiDragGestureRecognizer.new({debugOwner: this});
    }
  };
  (reorderable_grid$.ReorderableGridDelayedDragStartListener.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let index = opts && 'index' in opts ? opts.index : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : true;
    reorderable_grid$.ReorderableGridDelayedDragStartListener.__proto__.new.call(this, {key: key, child: child, index: index, enabled: enabled});
    ;
  }).prototype = reorderable_grid$.ReorderableGridDelayedDragStartListener.prototype;
  dart.addTypeTests(reorderable_grid$.ReorderableGridDelayedDragStartListener);
  dart.addTypeCaches(reorderable_grid$.ReorderableGridDelayedDragStartListener);
  dart.setLibraryUri(reorderable_grid$.ReorderableGridDelayedDragStartListener, I[2]);
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var ___DragInfo_listState = dart.privateName(reorderable_grid$, "_#_DragInfo#listState");
  var ___DragInfo_index = dart.privateName(reorderable_grid$, "_#_DragInfo#index");
  var ___DragInfo_child = dart.privateName(reorderable_grid$, "_#_DragInfo#child");
  var ___DragInfo_dragPosition = dart.privateName(reorderable_grid$, "_#_DragInfo#dragPosition");
  var ___DragInfo_dragOffset = dart.privateName(reorderable_grid$, "_#_DragInfo#dragOffset");
  var ___DragInfo_itemSize = dart.privateName(reorderable_grid$, "_#_DragInfo#itemSize");
  var ___DragInfo_capturedThemes = dart.privateName(reorderable_grid$, "_#_DragInfo#capturedThemes");
  var _proxyAnimation = dart.privateName(reorderable_grid$, "_proxyAnimation");
  reorderable_grid$._DragInfo = class _DragInfo extends drag.Drag {
    static ['_#new#tearOff'](opts) {
      let item = opts && 'item' in opts ? opts.item : null;
      let initialPosition = opts && 'initialPosition' in opts ? opts.initialPosition : C[9] || CT.C9;
      let onUpdate = opts && 'onUpdate' in opts ? opts.onUpdate : null;
      let onEnd = opts && 'onEnd' in opts ? opts.onEnd : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let onDropCompleted = opts && 'onDropCompleted' in opts ? opts.onDropCompleted : null;
      let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
      let tickerProvider = opts && 'tickerProvider' in opts ? opts.tickerProvider : null;
      return new reorderable_grid$._DragInfo.new({item: item, initialPosition: initialPosition, onUpdate: onUpdate, onEnd: onEnd, onCancel: onCancel, onDropCompleted: onDropCompleted, proxyDecorator: proxyDecorator, tickerProvider: tickerProvider});
    }
    get listState() {
      let t0;
      t0 = this[___DragInfo_listState];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("listState")) : t0;
    }
    set listState(listState$35param) {
      this[___DragInfo_listState] = listState$35param;
    }
    get index() {
      let t0;
      t0 = this[___DragInfo_index];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("index")) : t0;
    }
    set index(index$35param) {
      this[___DragInfo_index] = index$35param;
    }
    get child() {
      let t0;
      t0 = this[___DragInfo_child];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("child")) : t0;
    }
    set child(child$35param) {
      this[___DragInfo_child] = child$35param;
    }
    get dragPosition() {
      let t0;
      t0 = this[___DragInfo_dragPosition];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("dragPosition")) : t0;
    }
    set dragPosition(dragPosition$35param) {
      this[___DragInfo_dragPosition] = dragPosition$35param;
    }
    get dragOffset() {
      let t0;
      t0 = this[___DragInfo_dragOffset];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("dragOffset")) : t0;
    }
    set dragOffset(dragOffset$35param) {
      this[___DragInfo_dragOffset] = dragOffset$35param;
    }
    get itemSize() {
      let t0;
      t0 = this[___DragInfo_itemSize];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("itemSize")) : t0;
    }
    set itemSize(itemSize$35param) {
      this[___DragInfo_itemSize] = itemSize$35param;
    }
    get capturedThemes() {
      let t0;
      t0 = this[___DragInfo_capturedThemes];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("capturedThemes")) : t0;
    }
    set capturedThemes(capturedThemes$35param) {
      this[___DragInfo_capturedThemes] = capturedThemes$35param;
    }
    dispose() {
      let t0;
      t0 = this[_proxyAnimation];
      t0 == null ? null : t0.dispose();
    }
    startDrag() {
      let t0;
      this[_proxyAnimation] = (t0 = new animation_controller.AnimationController.new({vsync: this.tickerProvider, duration: C[8] || CT.C8}), (() => {
        t0.addStatusListener(dart.fn(status => {
          if (status === animation.AnimationStatus.dismissed) {
            this[_dropCompleted]();
          }
        }, T.AnimationStatusTovoid()));
        t0.forward();
        return t0;
      })());
    }
    update(details) {
      let t0;
      this.dragPosition = this.dragPosition['+'](details.delta);
      t0 = this.onUpdate;
      t0 == null ? null : t0(this, this.dragPosition, details.delta);
    }
    end(details) {
      let t0;
      dart.nullCheck(this[_proxyAnimation]).reverse();
      t0 = this.onEnd;
      t0 == null ? null : t0(this);
    }
    cancel() {
      let t0, t0$;
      t0 = this[_proxyAnimation];
      t0 == null ? null : t0.dispose();
      this[_proxyAnimation] = null;
      t0$ = this.onCancel;
      t0$ == null ? null : t0$(this);
    }
    [_dropCompleted]() {
      let t0, t0$;
      t0 = this[_proxyAnimation];
      t0 == null ? null : t0.dispose();
      this[_proxyAnimation] = null;
      t0$ = this.onDropCompleted;
      t0$ == null ? null : t0$();
    }
    createProxy(context) {
      return this.capturedThemes.wrap(new reorderable_grid$._DragItemProxy.new({listState: this.listState, index: this.index, size: this.itemSize, animation: dart.nullCheck(this[_proxyAnimation]), position: this.dragPosition['-'](this.dragOffset)['-'](reorderable_grid$._overlayOrigin(context)), proxyDecorator: this.proxyDecorator, child: this.child}));
    }
  };
  (reorderable_grid$._DragInfo.new = function(opts) {
    let item = opts && 'item' in opts ? opts.item : null;
    let initialPosition = opts && 'initialPosition' in opts ? opts.initialPosition : C[9] || CT.C9;
    let onUpdate = opts && 'onUpdate' in opts ? opts.onUpdate : null;
    let onEnd = opts && 'onEnd' in opts ? opts.onEnd : null;
    let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
    let onDropCompleted = opts && 'onDropCompleted' in opts ? opts.onDropCompleted : null;
    let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
    let tickerProvider = opts && 'tickerProvider' in opts ? opts.tickerProvider : null;
    this[___DragInfo_listState] = null;
    this[___DragInfo_index] = null;
    this[___DragInfo_child] = null;
    this[___DragInfo_dragPosition] = null;
    this[___DragInfo_dragOffset] = null;
    this[___DragInfo_itemSize] = null;
    this[___DragInfo_capturedThemes] = null;
    this.scrollable = null;
    this[_proxyAnimation] = null;
    this.onUpdate = onUpdate;
    this.onEnd = onEnd;
    this.onCancel = onCancel;
    this.onDropCompleted = onDropCompleted;
    this.proxyDecorator = proxyDecorator;
    this.tickerProvider = tickerProvider;
    let itemRenderBox = box.RenderBox.as(dart.nullCheck(item.context.findRenderObject()));
    this.listState = item[_listState];
    this.index = item.index;
    this.child = item.widget.child;
    this.capturedThemes = item.widget.capturedThemes;
    this.dragPosition = initialPosition;
    this.dragOffset = itemRenderBox.globalToLocal(initialPosition);
    this.itemSize = dart.nullCheck(item.context.size);
    this.scrollable = scrollable.Scrollable.of(item.context);
  }).prototype = reorderable_grid$._DragInfo.prototype;
  dart.addTypeTests(reorderable_grid$._DragInfo);
  dart.addTypeCaches(reorderable_grid$._DragInfo);
  dart.setMethodSignature(reorderable_grid$._DragInfo, () => ({
    __proto__: dart.getMethods(reorderable_grid$._DragInfo.__proto__),
    dispose: dart.fnType(dart.void, []),
    startDrag: dart.fnType(dart.void, []),
    [_dropCompleted]: dart.fnType(dart.void, []),
    createProxy: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(reorderable_grid$._DragInfo, () => ({
    __proto__: dart.getGetters(reorderable_grid$._DragInfo.__proto__),
    listState: reorderable_grid$.SliverReorderableGridState,
    index: core.int,
    child: framework.Widget,
    dragPosition: ui.Offset,
    dragOffset: ui.Offset,
    itemSize: ui.Size,
    capturedThemes: inherited_theme.CapturedThemes
  }));
  dart.setSetterSignature(reorderable_grid$._DragInfo, () => ({
    __proto__: dart.getSetters(reorderable_grid$._DragInfo.__proto__),
    listState: reorderable_grid$.SliverReorderableGridState,
    index: core.int,
    child: framework.Widget,
    dragPosition: ui.Offset,
    dragOffset: ui.Offset,
    itemSize: ui.Size,
    capturedThemes: inherited_theme.CapturedThemes
  }));
  dart.setLibraryUri(reorderable_grid$._DragInfo, I[2]);
  dart.setFieldSignature(reorderable_grid$._DragInfo, () => ({
    __proto__: dart.getFields(reorderable_grid$._DragInfo.__proto__),
    onUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [reorderable_grid$._DragInfo, ui.Offset, ui.Offset]))),
    onEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [reorderable_grid$._DragInfo]))),
    onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [reorderable_grid$._DragInfo]))),
    onDropCompleted: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    proxyDecorator: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.Widget, core.int, animation.Animation$(core.double)]))),
    tickerProvider: dart.finalFieldType(ticker.TickerProvider),
    [___DragInfo_listState]: dart.fieldType(dart.nullable(reorderable_grid$.SliverReorderableGridState)),
    [___DragInfo_index]: dart.fieldType(dart.nullable(core.int)),
    [___DragInfo_child]: dart.fieldType(dart.nullable(framework.Widget)),
    [___DragInfo_dragPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [___DragInfo_dragOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [___DragInfo_itemSize]: dart.fieldType(dart.nullable(ui.Size)),
    [___DragInfo_capturedThemes]: dart.fieldType(dart.nullable(inherited_theme.CapturedThemes)),
    scrollable: dart.fieldType(dart.nullable(scrollable.ScrollableState)),
    [_proxyAnimation]: dart.fieldType(dart.nullable(animation_controller.AnimationController))
  }));
  var listState$ = dart.privateName(reorderable_grid$, "_DragItemProxy.listState");
  var index$1 = dart.privateName(reorderable_grid$, "_DragItemProxy.index");
  var child$1 = dart.privateName(reorderable_grid$, "_DragItemProxy.child");
  var position$ = dart.privateName(reorderable_grid$, "_DragItemProxy.position");
  var size$ = dart.privateName(reorderable_grid$, "_DragItemProxy.size");
  var animation$ = dart.privateName(reorderable_grid$, "_DragItemProxy.animation");
  var proxyDecorator$1 = dart.privateName(reorderable_grid$, "_DragItemProxy.proxyDecorator");
  reorderable_grid$._DragItemProxy = class _DragItemProxy extends framework.StatelessWidget {
    get listState() {
      return this[listState$];
    }
    set listState(value) {
      super.listState = value;
    }
    get index() {
      return this[index$1];
    }
    set index(value) {
      super.index = value;
    }
    get child() {
      return this[child$1];
    }
    set child(value) {
      super.child = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get animation() {
      return this[animation$];
    }
    set animation(value) {
      super.animation = value;
    }
    get proxyDecorator() {
      return this[proxyDecorator$1];
    }
    set proxyDecorator(value) {
      super.proxyDecorator = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let listState = opts && 'listState' in opts ? opts.listState : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let animation = opts && 'animation' in opts ? opts.animation : null;
      let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
      return new reorderable_grid$._DragItemProxy.new({key: key, listState: listState, index: index, child: child, position: position, size: size, animation: animation, proxyDecorator: proxyDecorator});
    }
    build(context) {
      let t0, t0$;
      let proxyChild = (t0$ = (t0 = this.proxyDecorator, t0 == null ? null : t0(this.child, this.index, this.animation.view)), t0$ == null ? this.child : t0$);
      let overlayOrigin = reorderable_grid$._overlayOrigin(context);
      return new media_query.MediaQuery.new({data: media_query.MediaQuery.of(context).removePadding({removeTop: true}), child: new transitions.AnimatedBuilder.new({animation: this.animation, builder: dart.fn((context, child) => {
            let effectivePosition = this.position;
            let dropPosition = this.listState[_finalDropPosition];
            if (dropPosition != null) {
              effectivePosition = dart.nullCheck(ui.Offset.lerp(dropPosition['-'](overlayOrigin), effectivePosition, curves.Curves.easeOut.transform(this.animation.value)));
            }
            return new basic.Positioned.new({left: effectivePosition.dx, top: effectivePosition.dy, child: new basic.SizedBox.new({width: this.size.width, height: this.size.height, child: child})});
          }, T.BuildContextAndWidgetNToPositioned()), child: proxyChild})});
    }
  };
  (reorderable_grid$._DragItemProxy.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let listState = opts && 'listState' in opts ? opts.listState : null;
    let index = opts && 'index' in opts ? opts.index : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let position = opts && 'position' in opts ? opts.position : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let animation = opts && 'animation' in opts ? opts.animation : null;
    let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
    this[listState$] = listState;
    this[index$1] = index;
    this[child$1] = child;
    this[position$] = position;
    this[size$] = size;
    this[animation$] = animation;
    this[proxyDecorator$1] = proxyDecorator;
    reorderable_grid$._DragItemProxy.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid$._DragItemProxy.prototype;
  dart.addTypeTests(reorderable_grid$._DragItemProxy);
  dart.addTypeCaches(reorderable_grid$._DragItemProxy);
  dart.setMethodSignature(reorderable_grid$._DragItemProxy, () => ({
    __proto__: dart.getMethods(reorderable_grid$._DragItemProxy.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(reorderable_grid$._DragItemProxy, I[2]);
  dart.setFieldSignature(reorderable_grid$._DragItemProxy, () => ({
    __proto__: dart.getFields(reorderable_grid$._DragItemProxy.__proto__),
    listState: dart.finalFieldType(reorderable_grid$.SliverReorderableGridState),
    index: dart.finalFieldType(core.int),
    child: dart.finalFieldType(framework.Widget),
    position: dart.finalFieldType(ui.Offset),
    size: dart.finalFieldType(ui.Size),
    animation: dart.finalFieldType(animation_controller.AnimationController),
    proxyDecorator: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.Widget, core.int, animation.Animation$(core.double)])))
  }));
  var subKey$ = dart.privateName(reorderable_grid$, "_ReorderableItemGlobalKey.subKey");
  var index$2 = dart.privateName(reorderable_grid$, "_ReorderableItemGlobalKey.index");
  var state$ = dart.privateName(reorderable_grid$, "_ReorderableItemGlobalKey.state");
  reorderable_grid$._ReorderableItemGlobalKey = class _ReorderableItemGlobalKey extends framework.GlobalObjectKey$(framework.State$(framework.StatefulWidget)) {
    get subKey() {
      return this[subKey$];
    }
    set subKey(value) {
      super.subKey = value;
    }
    get index() {
      return this[index$2];
    }
    set index(value) {
      super.index = value;
    }
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
    static ['_#new#tearOff'](subKey, index, state) {
      return new reorderable_grid$._ReorderableItemGlobalKey.new(subKey, index, state);
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return reorderable_grid$._ReorderableItemGlobalKey.is(other) && other.subKey[$_equals](this.subKey) && other.index === this.index && other.state[$_equals](this.state);
    }
    get hashCode() {
      return core.Object.hash(this.subKey, this.index, this.state);
    }
  };
  (reorderable_grid$._ReorderableItemGlobalKey.new = function(subKey, index, state) {
    this[subKey$] = subKey;
    this[index$2] = index;
    this[state$] = state;
    reorderable_grid$._ReorderableItemGlobalKey.__proto__.new.call(this, subKey);
    ;
  }).prototype = reorderable_grid$._ReorderableItemGlobalKey.prototype;
  dart.addTypeTests(reorderable_grid$._ReorderableItemGlobalKey);
  dart.addTypeCaches(reorderable_grid$._ReorderableItemGlobalKey);
  dart.setLibraryUri(reorderable_grid$._ReorderableItemGlobalKey, I[2]);
  dart.setFieldSignature(reorderable_grid$._ReorderableItemGlobalKey, () => ({
    __proto__: dart.getFields(reorderable_grid$._ReorderableItemGlobalKey.__proto__),
    subKey: dart.finalFieldType(key.Key),
    index: dart.finalFieldType(core.int),
    state: dart.finalFieldType(reorderable_grid$.SliverReorderableGridState)
  }));
  dart.defineExtensionMethods(reorderable_grid$._ReorderableItemGlobalKey, ['_equals']);
  dart.defineExtensionAccessors(reorderable_grid$._ReorderableItemGlobalKey, ['hashCode']);
  reorderable_grid$._overlayOrigin = function _overlayOrigin(context) {
    let overlay = overlay$.Overlay.of(context);
    let overlayBox = box.RenderBox.as(dart.nullCheck(overlay.context.findRenderObject()));
    return overlayBox.localToGlobal(ui.Offset.zero);
  };
  var gridDelegate$1 = dart.privateName(reorderable_grid_view, "ReorderableGridView.gridDelegate");
  var scrollDirection$1 = dart.privateName(reorderable_grid_view, "ReorderableGridView.scrollDirection");
  var reverse$1 = dart.privateName(reorderable_grid_view, "ReorderableGridView.reverse");
  var primary$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.primary");
  var physics$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.physics");
  var shrinkWrap$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.shrinkWrap");
  var anchor$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.anchor");
  var cacheExtent$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.cacheExtent");
  var dragStartBehavior$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.dragStartBehavior");
  var keyboardDismissBehavior$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.keyboardDismissBehavior");
  var restorationId$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.restorationId");
  var clipBehavior$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.clipBehavior");
  var controller$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.controller");
  var padding$0 = dart.privateName(reorderable_grid_view, "ReorderableGridView.padding");
  var semanticChildCount$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.semanticChildCount");
  var itemBuilder$1 = dart.privateName(reorderable_grid_view, "ReorderableGridView.itemBuilder");
  var itemDragEnable$ = dart.privateName(reorderable_grid_view, "ReorderableGridView.itemDragEnable");
  var itemCount$1 = dart.privateName(reorderable_grid_view, "ReorderableGridView.itemCount");
  var onReorder$1 = dart.privateName(reorderable_grid_view, "ReorderableGridView.onReorder");
  var onReorderStart$1 = dart.privateName(reorderable_grid_view, "ReorderableGridView.onReorderStart");
  var proxyDecorator$2 = dart.privateName(reorderable_grid_view, "ReorderableGridView.proxyDecorator");
  var autoScroll$1 = dart.privateName(reorderable_grid_view, "ReorderableGridView.autoScroll");
  reorderable_grid_view.ReorderableGridView = class ReorderableGridView extends framework.StatefulWidget {
    get gridDelegate() {
      return this[gridDelegate$1];
    }
    set gridDelegate(value) {
      super.gridDelegate = value;
    }
    get scrollDirection() {
      return this[scrollDirection$1];
    }
    set scrollDirection(value) {
      super.scrollDirection = value;
    }
    get reverse() {
      return this[reverse$1];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get primary() {
      return this[primary$0];
    }
    set primary(value) {
      super.primary = value;
    }
    get physics() {
      return this[physics$0];
    }
    set physics(value) {
      super.physics = value;
    }
    get shrinkWrap() {
      return this[shrinkWrap$0];
    }
    set shrinkWrap(value) {
      super.shrinkWrap = value;
    }
    get anchor() {
      return this[anchor$0];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get cacheExtent() {
      return this[cacheExtent$0];
    }
    set cacheExtent(value) {
      super.cacheExtent = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$0];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get keyboardDismissBehavior() {
      return this[keyboardDismissBehavior$0];
    }
    set keyboardDismissBehavior(value) {
      super.keyboardDismissBehavior = value;
    }
    get restorationId() {
      return this[restorationId$0];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    get clipBehavior() {
      return this[clipBehavior$0];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get controller() {
      return this[controller$0];
    }
    set controller(value) {
      super.controller = value;
    }
    get padding() {
      return this[padding$0];
    }
    set padding(value) {
      super.padding = value;
    }
    get semanticChildCount() {
      return this[semanticChildCount$];
    }
    set semanticChildCount(value) {
      super.semanticChildCount = value;
    }
    get itemBuilder() {
      return this[itemBuilder$1];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get itemDragEnable() {
      return this[itemDragEnable$];
    }
    set itemDragEnable(value) {
      super.itemDragEnable = value;
    }
    get itemCount() {
      return this[itemCount$1];
    }
    set itemCount(value) {
      super.itemCount = value;
    }
    get onReorder() {
      return this[onReorder$1];
    }
    set onReorder(value) {
      super.onReorder = value;
    }
    get onReorderStart() {
      return this[onReorderStart$1];
    }
    set onReorderStart(value) {
      super.onReorderStart = value;
    }
    get proxyDecorator() {
      return this[proxyDecorator$2];
    }
    set proxyDecorator(value) {
      super.proxyDecorator = value;
    }
    get autoScroll() {
      return this[autoScroll$1];
    }
    set autoScroll(value) {
      super.autoScroll = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let itemDragEnable = opts && 'itemDragEnable' in opts ? opts.itemDragEnable : C[10] || CT.C10;
      let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
      let children = opts && 'children' in opts ? opts.children : C[11] || CT.C11;
      let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
      let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
      let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
      let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
      let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
      return new reorderable_grid_view.ReorderableGridView.new({key: key, scrollDirection: scrollDirection, reverse: reverse, controller: controller, primary: primary, physics: physics, shrinkWrap: shrinkWrap, padding: padding, gridDelegate: gridDelegate, onReorder: onReorder, itemDragEnable: itemDragEnable, cacheExtent: cacheExtent, children: children, semanticChildCount: semanticChildCount, dragStartBehavior: dragStartBehavior, clipBehavior: clipBehavior, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, anchor: anchor, proxyDecorator: proxyDecorator, autoScroll: autoScroll, onReorderStart: onReorderStart});
    }
    static ['_#builder#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
      let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
      let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let itemDragEnable = opts && 'itemDragEnable' in opts ? opts.itemDragEnable : C[10] || CT.C10;
      let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
      let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
      let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
      let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
      let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
      let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
      let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
      return new reorderable_grid_view.ReorderableGridView.builder({key: key, scrollDirection: scrollDirection, reverse: reverse, controller: controller, primary: primary, physics: physics, shrinkWrap: shrinkWrap, padding: padding, gridDelegate: gridDelegate, itemBuilder: itemBuilder, itemCount: itemCount, onReorder: onReorder, itemDragEnable: itemDragEnable, cacheExtent: cacheExtent, semanticChildCount: semanticChildCount, dragStartBehavior: dragStartBehavior, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, clipBehavior: clipBehavior, anchor: anchor, proxyDecorator: proxyDecorator, autoScroll: autoScroll, onReorderStart: onReorderStart});
    }
    static ['_#count#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let itemDragEnable = opts && 'itemDragEnable' in opts ? opts.itemDragEnable : C[10] || CT.C10;
      let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
      let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
      let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
      let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
      let children = opts && 'children' in opts ? opts.children : C[11] || CT.C11;
      let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
      let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
      let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
      let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
      let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
      let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
      return new reorderable_grid_view.ReorderableGridView.count({key: key, scrollDirection: scrollDirection, reverse: reverse, controller: controller, primary: primary, physics: physics, shrinkWrap: shrinkWrap, padding: padding, crossAxisCount: crossAxisCount, onReorder: onReorder, itemDragEnable: itemDragEnable, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, cacheExtent: cacheExtent, children: children, semanticChildCount: semanticChildCount, dragStartBehavior: dragStartBehavior, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, clipBehavior: clipBehavior, anchor: anchor, proxyDecorator: proxyDecorator, autoScroll: autoScroll, onReorderStart: onReorderStart});
    }
    static ['_#extent#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let maxCrossAxisExtent = opts && 'maxCrossAxisExtent' in opts ? opts.maxCrossAxisExtent : null;
      let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
      let itemDragEnable = opts && 'itemDragEnable' in opts ? opts.itemDragEnable : C[10] || CT.C10;
      let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
      let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
      let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
      let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
      let children = opts && 'children' in opts ? opts.children : C[11] || CT.C11;
      let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
      let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
      let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
      let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
      let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
      let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
      return new reorderable_grid_view.ReorderableGridView.extent({key: key, scrollDirection: scrollDirection, reverse: reverse, controller: controller, primary: primary, physics: physics, shrinkWrap: shrinkWrap, padding: padding, maxCrossAxisExtent: maxCrossAxisExtent, onReorder: onReorder, itemDragEnable: itemDragEnable, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, cacheExtent: cacheExtent, children: children, semanticChildCount: semanticChildCount, dragStartBehavior: dragStartBehavior, keyboardDismissBehavior: keyboardDismissBehavior, restorationId: restorationId, clipBehavior: clipBehavior, anchor: anchor, proxyDecorator: proxyDecorator, autoScroll: autoScroll, onReorderStart: onReorderStart});
    }
    createState() {
      return new reorderable_grid_view.ReorderableGridViewState.new();
    }
    static _defaultItemDragEnable(index) {
      return true;
    }
  };
  (reorderable_grid_view.ReorderableGridView.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let primary = opts && 'primary' in opts ? opts.primary : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let itemDragEnable = opts && 'itemDragEnable' in opts ? opts.itemDragEnable : C[10] || CT.C10;
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let children = opts && 'children' in opts ? opts.children : C[11] || CT.C11;
    let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
    let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
    let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
    let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
    let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
    this[scrollDirection$1] = scrollDirection;
    this[reverse$1] = reverse;
    this[controller$0] = controller;
    this[primary$0] = primary;
    this[physics$0] = physics;
    this[shrinkWrap$0] = shrinkWrap;
    this[padding$0] = padding;
    this[gridDelegate$1] = gridDelegate;
    this[onReorder$1] = onReorder;
    this[itemDragEnable$] = itemDragEnable;
    this[cacheExtent$0] = cacheExtent;
    this[semanticChildCount$] = semanticChildCount;
    this[dragStartBehavior$0] = dragStartBehavior;
    this[clipBehavior$0] = clipBehavior;
    this[keyboardDismissBehavior$0] = keyboardDismissBehavior;
    this[restorationId$0] = restorationId;
    this[anchor$0] = anchor;
    this[proxyDecorator$2] = proxyDecorator;
    this[autoScroll$1] = autoScroll;
    this[onReorderStart$1] = onReorderStart;
    if (!children[$every](dart.fn(w => w.key != null, T.WidgetTobool()))) dart.assertFailed("All children of this widget must have a key.", I[3], 262, 11, "children.every((Widget w) => w.key != null)");
    this[itemBuilder$1] = dart.fn((context, index) => children[$_get](index), T.BuildContextAndintToWidget());
    this[itemCount$1] = children[$length];
    reorderable_grid_view.ReorderableGridView.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid_view.ReorderableGridView.prototype;
  (reorderable_grid_view.ReorderableGridView.builder = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let primary = opts && 'primary' in opts ? opts.primary : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let gridDelegate = opts && 'gridDelegate' in opts ? opts.gridDelegate : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let itemDragEnable = opts && 'itemDragEnable' in opts ? opts.itemDragEnable : C[10] || CT.C10;
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
    let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
    let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
    let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
    let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
    let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
    this[scrollDirection$1] = scrollDirection;
    this[reverse$1] = reverse;
    this[controller$0] = controller;
    this[primary$0] = primary;
    this[physics$0] = physics;
    this[shrinkWrap$0] = shrinkWrap;
    this[padding$0] = padding;
    this[gridDelegate$1] = gridDelegate;
    this[itemBuilder$1] = itemBuilder;
    this[itemCount$1] = itemCount;
    this[onReorder$1] = onReorder;
    this[itemDragEnable$] = itemDragEnable;
    this[cacheExtent$0] = cacheExtent;
    this[semanticChildCount$] = semanticChildCount;
    this[dragStartBehavior$0] = dragStartBehavior;
    this[keyboardDismissBehavior$0] = keyboardDismissBehavior;
    this[restorationId$0] = restorationId;
    this[clipBehavior$0] = clipBehavior;
    this[anchor$0] = anchor;
    this[proxyDecorator$2] = proxyDecorator;
    this[autoScroll$1] = autoScroll;
    this[onReorderStart$1] = onReorderStart;
    if (!(itemCount >= 0)) dart.assertFailed(null, I[3], 312, 16, "itemCount >= 0");
    reorderable_grid_view.ReorderableGridView.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid_view.ReorderableGridView.prototype;
  (reorderable_grid_view.ReorderableGridView.count = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let primary = opts && 'primary' in opts ? opts.primary : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let itemDragEnable = opts && 'itemDragEnable' in opts ? opts.itemDragEnable : C[10] || CT.C10;
    let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
    let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
    let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let children = opts && 'children' in opts ? opts.children : C[11] || CT.C11;
    let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
    let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
    let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
    let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
    let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
    let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
    this[scrollDirection$1] = scrollDirection;
    this[reverse$1] = reverse;
    this[controller$0] = controller;
    this[primary$0] = primary;
    this[physics$0] = physics;
    this[shrinkWrap$0] = shrinkWrap;
    this[padding$0] = padding;
    this[onReorder$1] = onReorder;
    this[itemDragEnable$] = itemDragEnable;
    this[cacheExtent$0] = cacheExtent;
    this[semanticChildCount$] = semanticChildCount;
    this[dragStartBehavior$0] = dragStartBehavior;
    this[keyboardDismissBehavior$0] = keyboardDismissBehavior;
    this[restorationId$0] = restorationId;
    this[clipBehavior$0] = clipBehavior;
    this[anchor$0] = anchor;
    this[proxyDecorator$2] = proxyDecorator;
    this[autoScroll$1] = autoScroll;
    this[onReorderStart$1] = onReorderStart;
    this[gridDelegate$1] = new sliver_grid.SliverGridDelegateWithFixedCrossAxisCount.new({crossAxisCount: crossAxisCount, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio});
    if (!children[$every](dart.fn(w => w.key != null, T.WidgetTobool()))) dart.assertFailed("All children of this widget must have a key.", I[3], 362, 11, "children.every((Widget w) => w.key != null)");
    this[itemBuilder$1] = dart.fn((context, index) => children[$_get](index), T.BuildContextAndintToWidget());
    this[itemCount$1] = children[$length];
    reorderable_grid_view.ReorderableGridView.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid_view.ReorderableGridView.prototype;
  (reorderable_grid_view.ReorderableGridView.extent = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[2] || CT.C2;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let primary = opts && 'primary' in opts ? opts.primary : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let shrinkWrap = opts && 'shrinkWrap' in opts ? opts.shrinkWrap : false;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let maxCrossAxisExtent = opts && 'maxCrossAxisExtent' in opts ? opts.maxCrossAxisExtent : null;
    let onReorder = opts && 'onReorder' in opts ? opts.onReorder : null;
    let itemDragEnable = opts && 'itemDragEnable' in opts ? opts.itemDragEnable : C[10] || CT.C10;
    let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
    let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
    let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1;
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let children = opts && 'children' in opts ? opts.children : C[11] || CT.C11;
    let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[3] || CT.C3;
    let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[4] || CT.C4;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
    let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
    let proxyDecorator = opts && 'proxyDecorator' in opts ? opts.proxyDecorator : null;
    let autoScroll = opts && 'autoScroll' in opts ? opts.autoScroll : null;
    let onReorderStart = opts && 'onReorderStart' in opts ? opts.onReorderStart : null;
    this[scrollDirection$1] = scrollDirection;
    this[reverse$1] = reverse;
    this[controller$0] = controller;
    this[primary$0] = primary;
    this[physics$0] = physics;
    this[shrinkWrap$0] = shrinkWrap;
    this[padding$0] = padding;
    this[onReorder$1] = onReorder;
    this[itemDragEnable$] = itemDragEnable;
    this[cacheExtent$0] = cacheExtent;
    this[semanticChildCount$] = semanticChildCount;
    this[dragStartBehavior$0] = dragStartBehavior;
    this[keyboardDismissBehavior$0] = keyboardDismissBehavior;
    this[restorationId$0] = restorationId;
    this[clipBehavior$0] = clipBehavior;
    this[anchor$0] = anchor;
    this[proxyDecorator$2] = proxyDecorator;
    this[autoScroll$1] = autoScroll;
    this[onReorderStart$1] = onReorderStart;
    this[gridDelegate$1] = new sliver_grid.SliverGridDelegateWithMaxCrossAxisExtent.new({maxCrossAxisExtent: maxCrossAxisExtent, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio});
    if (!children[$every](dart.fn(w => w.key != null, T.WidgetTobool()))) dart.assertFailed("All children of this widget must have a key.", I[3], 416, 11, "children.every((Widget w) => w.key != null)");
    this[itemBuilder$1] = dart.fn((context, index) => children[$_get](index), T.BuildContextAndintToWidget());
    this[itemCount$1] = children[$length];
    reorderable_grid_view.ReorderableGridView.__proto__.new.call(this, {key: key});
    ;
  }).prototype = reorderable_grid_view.ReorderableGridView.prototype;
  dart.addTypeTests(reorderable_grid_view.ReorderableGridView);
  dart.addTypeCaches(reorderable_grid_view.ReorderableGridView);
  dart.setMethodSignature(reorderable_grid_view.ReorderableGridView, () => ({
    __proto__: dart.getMethods(reorderable_grid_view.ReorderableGridView.__proto__),
    createState: dart.fnType(reorderable_grid_view.ReorderableGridViewState, [])
  }));
  dart.setStaticMethodSignature(reorderable_grid_view.ReorderableGridView, () => ['_defaultItemDragEnable']);
  dart.setLibraryUri(reorderable_grid_view.ReorderableGridView, I[4]);
  dart.setFieldSignature(reorderable_grid_view.ReorderableGridView, () => ({
    __proto__: dart.getFields(reorderable_grid_view.ReorderableGridView.__proto__),
    gridDelegate: dart.finalFieldType(sliver_grid.SliverGridDelegate),
    scrollDirection: dart.finalFieldType(basic_types.Axis),
    reverse: dart.finalFieldType(core.bool),
    primary: dart.finalFieldType(dart.nullable(core.bool)),
    physics: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    shrinkWrap: dart.finalFieldType(core.bool),
    anchor: dart.finalFieldType(core.double),
    cacheExtent: dart.finalFieldType(dart.nullable(core.double)),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    keyboardDismissBehavior: dart.finalFieldType(scroll_view.ScrollViewKeyboardDismissBehavior),
    restorationId: dart.finalFieldType(dart.nullable(core.String)),
    clipBehavior: dart.finalFieldType(ui.Clip),
    controller: dart.finalFieldType(dart.nullable(scroll_controller.ScrollController)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    semanticChildCount: dart.finalFieldType(dart.nullable(core.int)),
    itemBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, core.int])),
    itemDragEnable: dart.finalFieldType(dart.fnType(core.bool, [core.int])),
    itemCount: dart.finalFieldType(core.int),
    onReorder: dart.finalFieldType(dart.fnType(dart.void, [core.int, core.int])),
    onReorderStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    proxyDecorator: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.Widget, core.int, animation.Animation$(core.double)]))),
    autoScroll: dart.finalFieldType(dart.nullable(core.bool))
  }));
  var _wrapWithSemantics = dart.privateName(reorderable_grid_view, "_wrapWithSemantics");
  var _itemBuilder$ = dart.privateName(reorderable_grid_view, "_itemBuilder");
  var _proxyDecorator = dart.privateName(reorderable_grid_view, "_proxyDecorator");
  reorderable_grid_view.ReorderableGridViewState = class ReorderableGridViewState extends framework.State$(reorderable_grid_view.ReorderableGridView) {
    [_wrapWithSemantics](child, index) {
      const reorder = (startIndex, endIndex) => {
        let t2, t1, t0;
        if (startIndex !== endIndex) {
          t0 = this.widget;
          t1 = startIndex;
          t2 = endIndex;
          t0.onReorder(t1, t2);
        }
      };
      dart.fn(reorder, T.intAndintTovoid());
      let semanticsActions = new (T.LinkedMapOfCustomSemanticsAction$VoidTovoid()).new();
      function moveToStart() {
        return reorder(index, 0);
      }
      dart.fn(moveToStart, T.VoidTovoid());
      const moveToEnd = () => {
        return reorder(index, this.widget.itemCount);
      };
      dart.fn(moveToEnd, T.VoidTovoid());
      function moveBefore() {
        return reorder(index, index - 1);
      }
      dart.fn(moveBefore, T.VoidTovoid());
      function moveAfter() {
        return reorder(index, index + 2);
      }
      dart.fn(moveAfter, T.VoidTovoid());
      let localizations = material_localizations.MaterialLocalizations.of(this.context);
      if (index > 0) {
        semanticsActions[$_set](new semantics.CustomSemanticsAction.new({label: localizations.reorderItemToStart}), moveToStart);
        let reorderItemBefore = localizations.reorderItemUp;
        if (this.widget.scrollDirection === basic_types.Axis.horizontal) {
          reorderItemBefore = basic.Directionality.of(this.context) === ui.TextDirection.ltr ? localizations.reorderItemLeft : localizations.reorderItemRight;
        }
        semanticsActions[$_set](new semantics.CustomSemanticsAction.new({label: reorderItemBefore}), moveBefore);
      }
      if (index < this.widget.itemCount - 1) {
        let reorderItemAfter = localizations.reorderItemDown;
        if (this.widget.scrollDirection === basic_types.Axis.horizontal) {
          reorderItemAfter = basic.Directionality.of(this.context) === ui.TextDirection.ltr ? localizations.reorderItemRight : localizations.reorderItemLeft;
        }
        semanticsActions[$_set](new semantics.CustomSemanticsAction.new({label: reorderItemAfter}), moveAfter);
        semanticsActions[$_set](new semantics.CustomSemanticsAction.new({label: localizations.reorderItemToEnd}), moveToEnd);
      }
      return new basic.MergeSemantics.new({child: new basic.Semantics.new({customSemanticsActions: semanticsActions, child: child})});
    }
    [_itemBuilder$](context, index) {
      let t2, t1, t0, t1$, t0$;
      let item = (t0 = this.widget, t1 = context, t2 = index, t0.itemBuilder(t1, t2));
      if (!dart.fn(() => {
        if (item.key == null) {
          dart.throw(assertions.FlutterError.new("Every item of ReorderableListView must have a key."));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[3], 571, 12, "() {\n      if (item.key == null) {\n        throw FlutterError(\n          'Every item of ReorderableListView must have a key.',\n        );\n      }\n      return true;\n    }()");
      let itemWithSemantics = this[_wrapWithSemantics](item, index);
      let itemGlobalKey = new reorderable_grid_view._ReorderableGridViewChildGlobalKey.new(dart.nullCheck(item.key), this);
      let enable = (t0$ = this.widget, t1$ = index, t0$.itemDragEnable(t1$));
      switch (theme.Theme.of(context).platform) {
        case C[12] || CT.C12:
        case C[13] || CT.C13:
        case C[14] || CT.C14:
          {
            return new reorderable_grid$.ReorderableGridDragStartListener.new({key: itemGlobalKey, index: index, enabled: enable, child: itemWithSemantics});
          }
        case C[15] || CT.C15:
        case C[16] || CT.C16:
        case C[17] || CT.C17:
          {
            return new reorderable_grid$.ReorderableGridDelayedDragStartListener.new({key: itemGlobalKey, index: index, enabled: enable, child: itemWithSemantics});
          }
      }
    }
    [_proxyDecorator](child, index, animation) {
      return new transitions.AnimatedBuilder.new({animation: animation, builder: dart.fn((context, child) => {
          let animValue = curves.Curves.easeInOut.transform(animation.value);
          let elevation = dart.nullCheck(ui.lerpDouble(0, 6, animValue));
          return new material.Material.new({elevation: elevation, child: child});
        }, T.BuildContextAndWidgetNToMaterial()), child: child});
    }
    build(context) {
      let t0, t0$, t0$0;
      if (!debug$.debugCheckHasMaterialLocalizations(context)) dart.assertFailed(null, I[3], 624, 12, "debugCheckHasMaterialLocalizations(context)");
      if (!debug.debugCheckHasOverlay(context)) dart.assertFailed(null, I[3], 625, 12, "debugCheckHasOverlay(context)");
      return new scroll_view.CustomScrollView.new({scrollDirection: this.widget.scrollDirection, reverse: this.widget.reverse, controller: this.widget.controller, primary: this.widget.primary, physics: this.widget.physics, shrinkWrap: this.widget.shrinkWrap, anchor: this.widget.anchor, cacheExtent: this.widget.cacheExtent, dragStartBehavior: this.widget.dragStartBehavior, keyboardDismissBehavior: this.widget.keyboardDismissBehavior, restorationId: this.widget.restorationId, clipBehavior: this.widget.clipBehavior, slivers: T.JSArrayOfWidget().of([new basic.SliverPadding.new({padding: (t0 = this.widget.padding, t0 == null ? edge_insets.EdgeInsets.zero : t0), sliver: new reorderable_grid$.SliverReorderableGrid.new({itemBuilder: dart.bind(this, _itemBuilder$), gridDelegate: this.widget.gridDelegate, itemCount: this.widget.itemCount, onReorder: this.widget.onReorder, onReorderStart: this.widget.onReorderStart, proxyDecorator: (t0$ = this.widget.proxyDecorator, t0$ == null ? dart.bind(this, _proxyDecorator) : t0$), autoScroll: (t0$0 = this.widget.autoScroll, t0$0 == null ? !scroll_physics.NeverScrollableScrollPhysics.is(this.widget.physics) : t0$0), scrollDirection: this.widget.scrollDirection, reverse: this.widget.reverse})})])});
    }
    static ['_#new#tearOff']() {
      return new reorderable_grid_view.ReorderableGridViewState.new();
    }
  };
  (reorderable_grid_view.ReorderableGridViewState.new = function() {
    reorderable_grid_view.ReorderableGridViewState.__proto__.new.call(this);
    ;
  }).prototype = reorderable_grid_view.ReorderableGridViewState.prototype;
  dart.addTypeTests(reorderable_grid_view.ReorderableGridViewState);
  dart.addTypeCaches(reorderable_grid_view.ReorderableGridViewState);
  dart.setMethodSignature(reorderable_grid_view.ReorderableGridViewState, () => ({
    __proto__: dart.getMethods(reorderable_grid_view.ReorderableGridViewState.__proto__),
    [_wrapWithSemantics]: dart.fnType(framework.Widget, [framework.Widget, core.int]),
    [_itemBuilder$]: dart.fnType(framework.Widget, [framework.BuildContext, core.int]),
    [_proxyDecorator]: dart.fnType(framework.Widget, [framework.Widget, core.int, animation.Animation$(core.double)]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(reorderable_grid_view.ReorderableGridViewState, I[4]);
  var subKey$0 = dart.privateName(reorderable_grid_view, "_ReorderableGridViewChildGlobalKey.subKey");
  var state$0 = dart.privateName(reorderable_grid_view, "_ReorderableGridViewChildGlobalKey.state");
  reorderable_grid_view._ReorderableGridViewChildGlobalKey = class _ReorderableGridViewChildGlobalKey extends framework.GlobalObjectKey$(framework.State$(framework.StatefulWidget)) {
    get subKey() {
      return this[subKey$0];
    }
    set subKey(value) {
      super.subKey = value;
    }
    get state() {
      return this[state$0];
    }
    set state(value) {
      super.state = value;
    }
    static ['_#new#tearOff'](subKey, state) {
      return new reorderable_grid_view._ReorderableGridViewChildGlobalKey.new(subKey, state);
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return reorderable_grid_view._ReorderableGridViewChildGlobalKey.is(other) && other.subKey[$_equals](this.subKey) && other.state[$_equals](this.state);
    }
    get hashCode() {
      return core.Object.hash(this.subKey, this.state);
    }
  };
  (reorderable_grid_view._ReorderableGridViewChildGlobalKey.new = function(subKey, state) {
    this[subKey$0] = subKey;
    this[state$0] = state;
    reorderable_grid_view._ReorderableGridViewChildGlobalKey.__proto__.new.call(this, subKey);
    ;
  }).prototype = reorderable_grid_view._ReorderableGridViewChildGlobalKey.prototype;
  dart.addTypeTests(reorderable_grid_view._ReorderableGridViewChildGlobalKey);
  dart.addTypeCaches(reorderable_grid_view._ReorderableGridViewChildGlobalKey);
  dart.setLibraryUri(reorderable_grid_view._ReorderableGridViewChildGlobalKey, I[4]);
  dart.setFieldSignature(reorderable_grid_view._ReorderableGridViewChildGlobalKey, () => ({
    __proto__: dart.getFields(reorderable_grid_view._ReorderableGridViewChildGlobalKey.__proto__),
    subKey: dart.finalFieldType(key.Key),
    state: dart.finalFieldType(framework.State$(framework.StatefulWidget))
  }));
  dart.defineExtensionMethods(reorderable_grid_view._ReorderableGridViewChildGlobalKey, ['_equals']);
  dart.defineExtensionAccessors(reorderable_grid_view._ReorderableGridViewChildGlobalKey, ['hashCode']);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:reorderable_grid/reorderable_grid.dart": reorderable_grid,
    "package:reorderable_grid/src/reorderable_grid.dart": reorderable_grid$,
    "package:reorderable_grid/src/reorderable_grid_view.dart": reorderable_grid_view,
    "package:reorderable_grid/src/typedefs.dart": typedefs
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid-1.0.10/lib/src/reorderable_grid.dart","/zapp/pub/.pub_cache/hosted/pub.dev/reorderable_grid-1.0.10/lib/src/reorderable_grid_view.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    reorderable_grid: reorderable_grid,
    src__reorderable_grid: reorderable_grid$,
    src__reorderable_grid_view: reorderable_grid_view,
    src__typedefs: typedefs
  };
}));

//# sourceMappingURL=main.js.map
